{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountDocumentsOperation = void 0;\nvar aggregate_1 = require(\"./aggregate\");\n/** @internal */\nvar CountDocumentsOperation = /*#__PURE__*/function (_aggregate_1$Aggregat) {\n  _inherits(CountDocumentsOperation, _aggregate_1$Aggregat);\n  function CountDocumentsOperation(collection, query, options) {\n    _classCallCheck(this, CountDocumentsOperation);\n    var pipeline = [];\n    pipeline.push({\n      $match: query\n    });\n    if (typeof options.skip === 'number') {\n      pipeline.push({\n        $skip: options.skip\n      });\n    }\n    if (typeof options.limit === 'number') {\n      pipeline.push({\n        $limit: options.limit\n      });\n    }\n    pipeline.push({\n      $group: {\n        _id: 1,\n        n: {\n          $sum: 1\n        }\n      }\n    });\n    return _possibleConstructorReturn(this, _getPrototypeOf(CountDocumentsOperation).call(this, collection.s.namespace, pipeline, options));\n  }\n  _createClass(CountDocumentsOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      _get(_getPrototypeOf(CountDocumentsOperation.prototype), \"execute\", this).call(this, server, session, function (err, result) {\n        if (err || !result) {\n          callback(err);\n          return;\n        }\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        var response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n          callback(undefined, 0);\n          return;\n        }\n        var docs = response.cursor.firstBatch;\n        callback(undefined, docs.length ? docs[0].n : 0);\n      });\n    }\n  }]);\n  return CountDocumentsOperation;\n}(aggregate_1.AggregateOperation);\nexports.CountDocumentsOperation = CountDocumentsOperation;","map":null,"metadata":{},"sourceType":"script"}