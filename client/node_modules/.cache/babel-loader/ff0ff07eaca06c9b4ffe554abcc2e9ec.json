{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar _require = require(\"./encoding\"),\n  utf8Encode = _require.utf8Encode,\n  utf8DecodeWithoutBOM = _require.utf8DecodeWithoutBOM;\nvar _require2 = require(\"./percent-encoding\"),\n  percentDecodeBytes = _require2.percentDecodeBytes,\n  utf8PercentEncodeString = _require2.utf8PercentEncodeString,\n  isURLEncodedPercentEncode = _require2.isURLEncodedPercentEncode;\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  var sequences = strictlySplitByteSequence(input, p(\"&\"));\n  var output = [];\n  var _iterator = _createForOfIteratorHelper(sequences),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var bytes = _step.value;\n      if (bytes.length === 0) {\n        continue;\n      }\n      var name = void 0,\n        value = void 0;\n      var indexOfEqual = bytes.indexOf(p(\"=\"));\n      if (indexOfEqual >= 0) {\n        name = bytes.slice(0, indexOfEqual);\n        value = bytes.slice(indexOfEqual + 1);\n      } else {\n        name = bytes;\n        value = new Uint8Array(0);\n      }\n      name = replaceByteInByteSequence(name, 0x2B, 0x20);\n      value = replaceByteInByteSequence(value, 0x2B, 0x20);\n      var nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n      var valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n      output.push([nameString, valueString]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples) {\n  var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n  var output = \"\";\n  var _iterator2 = _createForOfIteratorHelper(tuples.entries()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        i = _step2$value[0],\n        tuple = _step2$value[1];\n      // TODO: handle encoding override\n\n      var name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n      var value = tuple[1];\n      if (tuple.length > 2 && tuple[2] !== undefined) {\n        if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n          value = encoding;\n        } else if (tuple[2] === \"file\") {\n          // value is a File object\n          value = value.name;\n        }\n      }\n      value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n      if (i !== 0) {\n        output += \"&\";\n      }\n      output += \"\".concat(name, \"=\").concat(value);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return output;\n}\nfunction strictlySplitByteSequence(buf, cp) {\n  var list = [];\n  var last = 0;\n  var i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\nfunction replaceByteInByteSequence(buf, from, to) {\n  var i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\nmodule.exports = {\n  parseUrlencodedString: parseUrlencodedString,\n  serializeUrlencoded: serializeUrlencoded\n};","map":null,"metadata":{},"sourceType":"script"}