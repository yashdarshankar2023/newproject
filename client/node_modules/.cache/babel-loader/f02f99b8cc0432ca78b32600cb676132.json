{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _defineProperty = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _stateMachine;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nvar error_1 = require(\"./error\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nvar stateMachine = (_stateMachine = {}, _defineProperty(_stateMachine, exports.TxnState.NO_TRANSACTION, [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION]), _defineProperty(_stateMachine, exports.TxnState.STARTING_TRANSACTION, [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_IN_PROGRESS, [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_ABORTED]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_COMMITTED, [exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_ABORTED, [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION]), _defineProperty(_stateMachine, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, [exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.NO_TRANSACTION]), _stateMachine);\nvar ACTIVE_STATES = new Set([exports.TxnState.STARTING_TRANSACTION, exports.TxnState.TRANSACTION_IN_PROGRESS]);\nvar COMMITTED_STATES = new Set([exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nvar Transaction = /*#__PURE__*/function () {\n  /** Create a transaction @internal */\n  function Transaction(options) {\n    _classCallCheck(this, Transaction);\n    options = options !== null && options !== void 0 ? options : {};\n    this.state = exports.TxnState.NO_TRANSACTION;\n    this.options = {};\n    var writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n      this.options.writeConcern = writeConcern;\n    }\n    if (options.readConcern) {\n      this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    }\n    if (options.readPreference) {\n      this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n    }\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  /** @internal */\n  _createClass(Transaction, [{\n    key: \"transition\",\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    value: function transition(nextState) {\n      var nextStates = stateMachine[this.state];\n      if (nextStates && nextStates.includes(nextState)) {\n        this.state = nextState;\n        if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n          this.unpinServer();\n        }\n        return;\n      }\n      throw new error_1.MongoRuntimeError(\"Attempted illegal state transition from [\".concat(this.state, \"] to [\").concat(nextState, \"]\"));\n    } /** @internal */\n  }, {\n    key: \"pinServer\",\n    value: function pinServer(server) {\n      if (this.isActive) {\n        this._pinnedServer = server;\n      }\n    } /** @internal */\n  }, {\n    key: \"unpinServer\",\n    value: function unpinServer() {\n      this._pinnedServer = undefined;\n    }\n  }, {\n    key: \"server\",\n    get: function get() {\n      return this._pinnedServer;\n    }\n  }, {\n    key: \"recoveryToken\",\n    get: function get() {\n      return this._recoveryToken;\n    }\n  }, {\n    key: \"isPinned\",\n    get: function get() {\n      return !!this.server;\n    } /** @returns Whether the transaction has started */\n  }, {\n    key: \"isStarting\",\n    get: function get() {\n      return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return ACTIVE_STATES.has(this.state);\n    }\n  }, {\n    key: \"isCommitted\",\n    get: function get() {\n      return COMMITTED_STATES.has(this.state);\n    }\n  }]);\n  return Transaction;\n}();\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;","map":null,"metadata":{},"sourceType":"script"}