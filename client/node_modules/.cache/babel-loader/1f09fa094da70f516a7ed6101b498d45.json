{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucket = void 0;\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar utils_1 = require(\"../utils\");\nvar write_concern_1 = require(\"../write_concern\");\nvar download_1 = require(\"./download\");\nvar upload_1 = require(\"./upload\");\nvar DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nvar GridFSBucket = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(GridFSBucket, _mongo_types_1$TypedE);\n  function GridFSBucket(db, options) {\n    var _this;\n    _classCallCheck(this, GridFSBucket);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GridFSBucket).call(this));\n    _this.setMaxListeners(0);\n    var privateOptions = _objectSpread({}, DEFAULT_GRIDFS_BUCKET_OPTIONS, options, {\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    });\n    _this.s = {\n      db: db,\n      options: privateOptions,\n      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n    return _this;\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n  _createClass(GridFSBucket, [{\n    key: \"openUploadStream\",\n    value: function openUploadStream(filename, options) {\n      return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n  }, {\n    key: \"openUploadStreamWithId\",\n    value: function openUploadStreamWithId(id, filename, options) {\n      return new upload_1.GridFSBucketWriteStream(this, filename, _objectSpread({}, options, {\n        id: id\n      }));\n    } /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  }, {\n    key: \"openDownloadStream\",\n    value: function openDownloadStream(id, options) {\n      return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n        _id: id\n      }, options);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id, callback) {\n      var _this2 = this;\n      return (0, utils_1.maybePromise)(callback, function (callback) {\n        return _this2.s._filesCollection.deleteOne({\n          _id: id\n        }, function (error, res) {\n          if (error) {\n            return callback(error);\n          }\n          return _this2.s._chunksCollection.deleteMany({\n            files_id: id\n          }, function (error) {\n            if (error) {\n              return callback(error);\n            }\n            // Delete orphaned chunks before returning FileNotFound\n            if (!(res === null || res === void 0 ? void 0 : res.deletedCount)) {\n              // TODO(NODE-3483): Replace with more appropriate error\n              // Consider creating new error MongoGridFSFileNotFoundError\n              return callback(new error_1.MongoRuntimeError(\"File not found for id \".concat(id)));\n            }\n            return callback();\n          });\n        });\n      });\n    } /** Convenience wrapper around find on the files collection */\n  }, {\n    key: \"find\",\n    value: function find(filter, options) {\n      filter !== null && filter !== void 0 ? filter : filter = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n  }, {\n    key: \"openDownloadStreamByName\",\n    value: function openDownloadStreamByName(filename, options) {\n      var sort = {\n        uploadDate: -1\n      };\n      var skip = undefined;\n      if (options && options.revision != null) {\n        if (options.revision >= 0) {\n          sort = {\n            uploadDate: 1\n          };\n          skip = options.revision;\n        } else {\n          skip = -options.revision - 1;\n        }\n      }\n      return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n        filename: filename\n      }, _objectSpread({}, options, {\n        sort: sort,\n        skip: skip\n      }));\n    }\n  }, {\n    key: \"rename\",\n    value: function rename(id, filename, callback) {\n      var _this3 = this;\n      return (0, utils_1.maybePromise)(callback, function (callback) {\n        var filter = {\n          _id: id\n        };\n        var update = {\n          $set: {\n            filename: filename\n          }\n        };\n        return _this3.s._filesCollection.updateOne(filter, update, function (error, res) {\n          if (error) {\n            return callback(error);\n          }\n          if (!(res === null || res === void 0 ? void 0 : res.matchedCount)) {\n            return callback(new error_1.MongoRuntimeError(\"File with id \".concat(id, \" not found\")));\n          }\n          return callback();\n        });\n      });\n    }\n  }, {\n    key: \"drop\",\n    value: function drop(callback) {\n      var _this4 = this;\n      return (0, utils_1.maybePromise)(callback, function (callback) {\n        return _this4.s._filesCollection.drop(function (error) {\n          if (error) {\n            return callback(error);\n          }\n          return _this4.s._chunksCollection.drop(function (error) {\n            if (error) {\n              return callback(error);\n            }\n            return callback();\n          });\n        });\n      });\n    } /** Get the Db scoped logger. */\n  }, {\n    key: \"getLogger\",\n    value: function getLogger() {\n      return this.s.db.s.logger;\n    }\n  }]);\n  return GridFSBucket;\n}(mongo_types_1.TypedEventEmitter);\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';","map":null,"metadata":{},"sourceType":"script"}