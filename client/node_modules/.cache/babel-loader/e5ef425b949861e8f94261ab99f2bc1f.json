{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _defineProperty = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _ref;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTTPinger = exports.Monitor = void 0;\nvar timers_1 = require(\"timers\");\nvar bson_1 = require(\"../bson\");\nvar connect_1 = require(\"../cmap/connect\");\nvar connection_1 = require(\"../cmap/connection\");\nvar constants_1 = require(\"../constants\");\nvar error_1 = require(\"../error\");\nvar mongo_types_1 = require(\"../mongo_types\");\nvar utils_1 = require(\"../utils\");\nvar common_1 = require(\"./common\");\nvar events_1 = require(\"./events\");\nvar server_1 = require(\"./server\");\n/** @internal */\nvar kServer = Symbol('server');\n/** @internal */\nvar kMonitorId = Symbol('monitorId');\n/** @internal */\nvar kConnection = Symbol('connection');\n/** @internal */\nvar kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nvar kRTTPinger = Symbol('rttPinger');\n/** @internal */\nvar kRoundTripTime = Symbol('roundTripTime');\nvar STATE_IDLE = 'idle';\nvar STATE_MONITORING = 'monitoring';\nvar stateTransition = (0, utils_1.makeStateMachine)((_ref = {}, _defineProperty(_ref, common_1.STATE_CLOSING, [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED]), _defineProperty(_ref, common_1.STATE_CLOSED, [common_1.STATE_CLOSED, STATE_MONITORING]), _defineProperty(_ref, STATE_IDLE, [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING]), _defineProperty(_ref, STATE_MONITORING, [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]), _ref));\nvar INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nvar Monitor = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(Monitor, _mongo_types_1$TypedE);\n  function Monitor(server, options) {\n    var _this;\n    _classCallCheck(this, Monitor);\n    var _a, _b, _c;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Monitor).call(this));\n    _this[kServer] = server;\n    _this[kConnection] = undefined;\n    _this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    _this[kCancellationToken].setMaxListeners(Infinity);\n    _this[kMonitorId] = undefined;\n    _this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    _this.address = server.description.address;\n    _this.options = Object.freeze({\n      connectTimeoutMS: (_a = options.connectTimeoutMS) !== null && _a !== void 0 ? _a : 10000,\n      heartbeatFrequencyMS: (_b = options.heartbeatFrequencyMS) !== null && _b !== void 0 ? _b : 10000,\n      minHeartbeatFrequencyMS: (_c = options.minHeartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 500\n    });\n    var cancellationToken = _this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    var connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.s.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken: cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options,\n    // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    });\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    _this.connectOptions = Object.freeze(connectOptions);\n    return _this;\n  }\n  _createClass(Monitor, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.s.state !== common_1.STATE_CLOSED) {\n        return;\n      }\n      // start\n      var heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n      var minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n      this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n        interval: heartbeatFrequencyMS,\n        minInterval: minHeartbeatFrequencyMS,\n        immediate: true\n      });\n    }\n  }, {\n    key: \"requestCheck\",\n    value: function requestCheck() {\n      var _a;\n      if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n        return;\n      }\n      (_a = this[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var topologyVersion = this[kServer].description.topologyVersion;\n      if (isInCloseState(this) || topologyVersion == null) {\n        return;\n      }\n      stateTransition(this, common_1.STATE_CLOSING);\n      resetMonitorState(this);\n      // restart monitor\n      stateTransition(this, STATE_IDLE);\n      // restart monitoring\n      var heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n      var minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n      this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n        interval: heartbeatFrequencyMS,\n        minInterval: minHeartbeatFrequencyMS\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (isInCloseState(this)) {\n        return;\n      }\n      stateTransition(this, common_1.STATE_CLOSING);\n      resetMonitorState(this);\n      // close monitor\n      this.emit('close');\n      stateTransition(this, common_1.STATE_CLOSED);\n    }\n  }, {\n    key: \"connection\",\n    get: function get() {\n      return this[kConnection];\n    }\n  }]);\n  return Monitor;\n}(mongo_types_1.TypedEventEmitter);\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  var _a, _b, _c;\n  (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.stop();\n  monitor[kMonitorId] = undefined;\n  (_b = monitor[kRTTPinger]) === null || _b === void 0 ? void 0 : _b.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  (_c = monitor[kConnection]) === null || _c === void 0 ? void 0 : _c.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n  var start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n  function failureHandler(err) {\n    var _a;\n    (_a = monitor[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n  var connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    var serverApi = connection.serverApi,\n      helloOk = connection.helloOk;\n    var connectTimeoutMS = monitor.options.connectTimeoutMS;\n    var maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    var topologyVersion = monitor[kServer].description.topologyVersion;\n    var isAwaitable = topologyVersion != null;\n    var cmd = _objectSpread(_defineProperty({}, (serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND, true), isAwaitable && topologyVersion ? {\n      maxAwaitTimeMS: maxAwaitTimeMS,\n      topologyVersion: makeTopologyVersion(topologyVersion)\n    } : {});\n    var options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, function (err, hello) {\n      var _a;\n      if (err) {\n        return failureHandler(err);\n      }\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      var rttPinger = monitor[kRTTPinger];\n      var duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello));\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        (_a = monitor[kRTTPinger]) === null || _a === void 0 ? void 0 : _a.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  }\n  // connecting does an implicit `hello`\n  (0, connect_1.connect)(monitor.connectOptions, function (err, conn) {\n    if (err) {\n      monitor[kConnection] = undefined;\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof error_1.MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n      failureHandler(err);\n      return;\n    }\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\nfunction monitorServer(monitor) {\n  return function (callback) {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, function (err, hello) {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        (0, timers_1.setTimeout)(function () {\n          var _a;\n          if (!isInCloseState(monitor)) {\n            (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nvar RTTPinger = /*#__PURE__*/function () {\n  function RTTPinger(cancellationToken, options) {\n    var _this2 = this;\n    _classCallCheck(this, RTTPinger);\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    var heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(function () {\n      return measureRoundTripTime(_this2, options);\n    }, heartbeatFrequencyMS);\n  }\n  _createClass(RTTPinger, [{\n    key: \"close\",\n    value: function close() {\n      var _a;\n      this.closed = true;\n      (0, timers_1.clearTimeout)(this[kMonitorId]);\n      (_a = this[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n        force: true\n      });\n      this[kConnection] = undefined;\n    }\n  }, {\n    key: \"roundTripTime\",\n    get: function get() {\n      return this[kRoundTripTime];\n    }\n  }]);\n  return RTTPinger;\n}();\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  var start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  var heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn === null || conn === void 0 ? void 0 : conn.destroy({\n        force: true\n      });\n      return;\n    }\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(function () {\n      return measureRoundTripTime(rttPinger, options);\n    }, heartbeatFrequencyMS);\n  }\n  var connection = rttPinger[kConnection];\n  if (connection == null) {\n    (0, connect_1.connect)(options, function (err, conn) {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n  connection.command((0, utils_1.ns)('admin.$cmd'), _defineProperty({}, constants_1.LEGACY_HELLO_COMMAND, 1), undefined, function (err) {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n    measureAndReschedule();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}