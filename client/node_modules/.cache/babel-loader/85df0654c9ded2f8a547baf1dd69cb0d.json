{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar urlencoded = require(\"./urlencoded\");\nexports.implementation = /*#__PURE__*/function () {\n  function URLSearchParamsImpl(globalObject, constructorArgs, _ref) {\n    var _ref$doNotStripQMark = _ref.doNotStripQMark,\n      doNotStripQMark = _ref$doNotStripQMark === void 0 ? false : _ref$doNotStripQMark;\n    _classCallCheck(this, URLSearchParamsImpl);\n    var init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n    if (Array.isArray(init)) {\n      var _iterator = _createForOfIteratorHelper(init),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          if (pair.length !== 2) {\n            throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" + \"contain exactly two elements.\");\n          }\n          this._list.push([pair[0], pair[1]]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (var _i = 0, _Object$keys = Object.keys(init); _i < _Object$keys.length; _i++) {\n        var name = _Object$keys[_i];\n        var value = init[name];\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n  _createClass(URLSearchParamsImpl, [{\n    key: \"_updateSteps\",\n    value: function _updateSteps() {\n      if (this._url !== null) {\n        var query = urlencoded.serializeUrlencoded(this._list);\n        if (query === \"\") {\n          query = null;\n        }\n        this._url._url.query = query;\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      this._list.push([name, value]);\n      this._updateSteps();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      var i = 0;\n      while (i < this._list.length) {\n        if (this._list[i][0] === name) {\n          this._list.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n      this._updateSteps();\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _iterator2 = _createForOfIteratorHelper(this._list),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tuple = _step2.value;\n          if (tuple[0] === name) {\n            return tuple[1];\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return null;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      var output = [];\n      var _iterator3 = _createForOfIteratorHelper(this._list),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var tuple = _step3.value;\n          if (tuple[0] === name) {\n            output.push(tuple[1]);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return output;\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      var _iterator4 = _createForOfIteratorHelper(this._list),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tuple = _step4.value;\n          if (tuple[0] === name) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      var found = false;\n      var i = 0;\n      while (i < this._list.length) {\n        if (this._list[i][0] === name) {\n          if (found) {\n            this._list.splice(i, 1);\n          } else {\n            found = true;\n            this._list[i][1] = value;\n            i++;\n          }\n        } else {\n          i++;\n        }\n      }\n      if (!found) {\n        this._list.push([name, value]);\n      }\n      this._updateSteps();\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this._list.sort(function (a, b) {\n        if (a[0] < b[0]) {\n          return -1;\n        }\n        if (a[0] > b[0]) {\n          return 1;\n        }\n        return 0;\n      });\n      this._updateSteps();\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this._list[Symbol.iterator]();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return urlencoded.serializeUrlencoded(this._list);\n    }\n  }]);\n  return URLSearchParamsImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}