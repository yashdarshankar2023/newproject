{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nvar error_1 = require(\"../error\");\nvar read_preference_1 = require(\"../read_preference\");\nvar sort_1 = require(\"../sort\");\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n/** @internal */\nvar FindAndModifyOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(FindAndModifyOperation, _command_1$CommandOpe);\n  function FindAndModifyOperation(collection, query, options) {\n    var _this;\n    _classCallCheck(this, FindAndModifyOperation);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindAndModifyOperation).call(this, collection, options));\n    _this.options = options !== null && options !== void 0 ? options : {};\n    _this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    var sort = (0, sort_1.formatSort)(options.sort);\n    if (sort) {\n      _this.cmdBase.sort = sort;\n    }\n    if (options.projection) {\n      _this.cmdBase.fields = options.projection;\n    }\n    if (options.maxTimeMS) {\n      _this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      _this.cmdBase.writeConcern = options.writeConcern;\n    }\n    if (options.let) {\n      _this.cmdBase.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      _this.cmdBase.comment = options.comment;\n    }\n    // force primary read preference\n    _this.readPreference = read_preference_1.ReadPreference.primary;\n    _this.collection = collection;\n    _this.query = query;\n    return _this;\n  }\n  _createClass(FindAndModifyOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      var _a;\n      var coll = this.collection;\n      var query = this.query;\n      var options = _objectSpread({}, this.options, this.bsonOptions);\n      // Create findAndModify command object\n      var cmd = _objectSpread({\n        findAndModify: coll.collectionName,\n        query: query\n      }, this.cmdBase);\n      // Have we specified collation\n      try {\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n      } catch (err) {\n        return callback(err);\n      }\n      if (options.hint) {\n        // TODO: once this method becomes a CommandOperation we will have the server\n        // in place to check.\n        var unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n        if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n          callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n          return;\n        }\n        cmd.hint = options.hint;\n      }\n      if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n        callback(new error_1.MongoCompatibilityError(\"Server \".concat(server.name, \" does not support explain on findAndModify\")));\n        return;\n      }\n      // Execute the command\n      _get(_getPrototypeOf(FindAndModifyOperation.prototype), \"executeCommand\", this).call(this, server, session, cmd, function (err, result) {\n        if (err) return callback(err);\n        return callback(undefined, result);\n      });\n    }\n  }]);\n  return FindAndModifyOperation;\n}(command_1.CommandOperation);\n/** @internal */\nvar FindOneAndDeleteOperation = /*#__PURE__*/function (_FindAndModifyOperati) {\n  _inherits(FindOneAndDeleteOperation, _FindAndModifyOperati);\n  function FindOneAndDeleteOperation(collection, filter, options) {\n    var _this2;\n    _classCallCheck(this, FindOneAndDeleteOperation);\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(FindOneAndDeleteOperation).call(this, collection, filter, options));\n    _this2.cmdBase.remove = true;\n    return _this2;\n  }\n  return FindOneAndDeleteOperation;\n}(FindAndModifyOperation);\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nvar FindOneAndReplaceOperation = /*#__PURE__*/function (_FindAndModifyOperati2) {\n  _inherits(FindOneAndReplaceOperation, _FindAndModifyOperati2);\n  function FindOneAndReplaceOperation(collection, filter, replacement, options) {\n    var _this3;\n    _classCallCheck(this, FindOneAndReplaceOperation);\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(FindOneAndReplaceOperation).call(this, collection, filter, options));\n    _this3.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(_this3.cmdBase, options);\n    return _this3;\n  }\n  return FindOneAndReplaceOperation;\n}(FindAndModifyOperation);\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nvar FindOneAndUpdateOperation = /*#__PURE__*/function (_FindAndModifyOperati3) {\n  _inherits(FindOneAndUpdateOperation, _FindAndModifyOperati3);\n  function FindOneAndUpdateOperation(collection, filter, update, options) {\n    var _this4;\n    _classCallCheck(this, FindOneAndUpdateOperation);\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(FindOneAndUpdateOperation).call(this, collection, filter, options));\n    _this4.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(_this4.cmdBase, options);\n    if (options.arrayFilters) {\n      _this4.cmdBase.arrayFilters = options.arrayFilters;\n    }\n    return _this4;\n  }\n  return FindOneAndUpdateOperation;\n}(FindAndModifyOperation);\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":null,"metadata":{},"sourceType":"script"}