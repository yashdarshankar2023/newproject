{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TopologyDescription = void 0;\nvar WIRE_CONSTANTS = require(\"../cmap/wire_protocol/constants\");\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar common_1 = require(\"./common\");\nvar server_description_1 = require(\"./server_description\");\n// constants related to compatibility checks\nvar MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nvar MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nvar MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nvar MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nvar MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nvar MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nvar NON_PRIMARY_RS_MEMBERS = new Set([common_1.ServerType.RSSecondary, common_1.ServerType.RSArbiter, common_1.ServerType.RSOther]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nvar TopologyDescription = /*#__PURE__*/function () {\n  /**\n   * Create a TopologyDescription\n   */\n  function TopologyDescription(topologyType) {\n    var serverDescriptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var maxSetVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var maxElectionId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var commonWireVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    _classCallCheck(this, TopologyDescription);\n    var _a, _b;\n    options = options !== null && options !== void 0 ? options : {};\n    this.type = topologyType !== null && topologyType !== void 0 ? topologyType : common_1.TopologyType.Unknown;\n    this.servers = serverDescriptions !== null && serverDescriptions !== void 0 ? serverDescriptions : new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.heartbeatFrequencyMS = (_a = options.heartbeatFrequencyMS) !== null && _a !== void 0 ? _a : 0;\n    this.localThresholdMS = (_b = options.localThresholdMS) !== null && _b !== void 0 ? _b : 15;\n    this.setName = setName !== null && setName !== void 0 ? setName : null;\n    this.maxElectionId = maxElectionId !== null && maxElectionId !== void 0 ? maxElectionId : null;\n    this.maxSetVersion = maxSetVersion !== null && maxSetVersion !== void 0 ? maxSetVersion : null;\n    this.commonWireVersion = commonWireVersion !== null && commonWireVersion !== void 0 ? commonWireVersion : 0;\n    // determine server compatibility\n    var _iterator = _createForOfIteratorHelper(this.servers.values()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var serverDescription = _step.value;\n        // Load balancer mode is always compatible.\n        if (serverDescription.type === common_1.ServerType.Unknown || serverDescription.type === common_1.ServerType.LoadBalancer) {\n          continue;\n        }\n        if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n          this.compatible = false;\n          this.compatibilityError = \"Server at \".concat(serverDescription.address, \" requires wire version \").concat(serverDescription.minWireVersion, \", but this version of the driver only supports up to \").concat(MAX_SUPPORTED_WIRE_VERSION, \" (MongoDB \").concat(MAX_SUPPORTED_SERVER_VERSION, \")\");\n        }\n        if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n          this.compatible = false;\n          this.compatibilityError = \"Server at \".concat(serverDescription.address, \" reports wire version \").concat(serverDescription.maxWireVersion, \", but this version of the driver requires at least \").concat(MIN_SUPPORTED_WIRE_VERSION, \" (MongoDB \").concat(MIN_SUPPORTED_SERVER_VERSION, \").\");\n          break;\n        }\n      }\n      // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n      // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n      // value among ServerDescriptions of all data-bearing server types. If any have a null\n      // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n      // set to null.\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    this.logicalSessionTimeoutMinutes = null;\n    var _iterator2 = _createForOfIteratorHelper(this.servers),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          server = _step2$value[1];\n        if (server.isReadable) {\n          if (server.logicalSessionTimeoutMinutes == null) {\n            // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n            this.logicalSessionTimeoutMinutes = null;\n            break;\n          }\n          if (this.logicalSessionTimeoutMinutes == null) {\n            // First server with a non null logicalSessionsTimeout\n            this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n            continue;\n          }\n          // Always select the smaller of the:\n          // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n          this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @internal\n   */\n  _createClass(TopologyDescription, [{\n    key: \"updateFromSrvPollingEvent\",\n    value: function updateFromSrvPollingEvent(ev) {\n      var srvMaxHosts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      /** The SRV addresses defines the set of addresses we should be using */\n      var incomingHostnames = ev.hostnames();\n      var currentHostnames = new Set(this.servers.keys());\n      var hostnamesToAdd = new Set(incomingHostnames);\n      var hostnamesToRemove = new Set();\n      var _iterator3 = _createForOfIteratorHelper(currentHostnames),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var hostname = _step3.value;\n          // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n          hostnamesToAdd.delete(hostname);\n          if (!incomingHostnames.has(hostname)) {\n            // If the SRV Records no longer include this hostname\n            // we have to stop using it\n            hostnamesToRemove.add(hostname);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n        // No new hosts to add and none to remove\n        return this;\n      }\n      var serverDescriptions = new Map(this.servers);\n      var _iterator4 = _createForOfIteratorHelper(hostnamesToRemove),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var removedHost = _step4.value;\n          serverDescriptions.delete(removedHost);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (hostnamesToAdd.size > 0) {\n        if (srvMaxHosts === 0) {\n          // Add all!\n          var _iterator5 = _createForOfIteratorHelper(hostnamesToAdd),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var hostToAdd = _step5.value;\n              serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        } else if (serverDescriptions.size < srvMaxHosts) {\n          // Add only the amount needed to get us back to srvMaxHosts\n          var selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n          var _iterator6 = _createForOfIteratorHelper(selectedHosts),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var selectedHostToAdd = _step6.value;\n              serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      }\n      return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, {\n        heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n        localThresholdMS: this.localThresholdMS\n      });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n  }, {\n    key: \"update\",\n    value: function update(serverDescription) {\n      var address = serverDescription.address;\n      // potentially mutated values\n      var topologyType = this.type,\n        setName = this.setName,\n        maxSetVersion = this.maxSetVersion,\n        maxElectionId = this.maxElectionId,\n        commonWireVersion = this.commonWireVersion;\n      var serverType = serverDescription.type;\n      var serverDescriptions = new Map(this.servers);\n      // update common wire version\n      if (serverDescription.maxWireVersion !== 0) {\n        if (commonWireVersion == null) {\n          commonWireVersion = serverDescription.maxWireVersion;\n        } else {\n          commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n        }\n      }\n      if (typeof serverDescription.setName === 'string' && typeof setName === 'string' && serverDescription.setName !== setName) {\n        if (topologyType === common_1.TopologyType.Single) {\n          // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n          serverDescription = new server_description_1.ServerDescription(address);\n        } else {\n          serverDescriptions.delete(address);\n        }\n      }\n      // update the actual server description\n      serverDescriptions.set(address, serverDescription);\n      if (topologyType === common_1.TopologyType.Single) {\n        // once we are defined as single, that never changes\n        return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n          heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n          localThresholdMS: this.localThresholdMS\n        });\n      }\n      if (topologyType === common_1.TopologyType.Unknown) {\n        if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n          serverDescriptions.delete(address);\n        } else {\n          topologyType = topologyTypeForServerType(serverType);\n        }\n      }\n      if (topologyType === common_1.TopologyType.Sharded) {\n        if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n          serverDescriptions.delete(address);\n        }\n      }\n      if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (MONGOS_OR_STANDALONE.has(serverType)) {\n          serverDescriptions.delete(address);\n        }\n        if (serverType === common_1.ServerType.RSPrimary) {\n          var result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n          topologyType = result[0];\n          setName = result[1];\n          maxSetVersion = result[2];\n          maxElectionId = result[3];\n        } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n          var _result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n          topologyType = _result[0];\n          setName = _result[1];\n        }\n      }\n      if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n        if (MONGOS_OR_STANDALONE.has(serverType)) {\n          serverDescriptions.delete(address);\n          topologyType = checkHasPrimary(serverDescriptions);\n        } else if (serverType === common_1.ServerType.RSPrimary) {\n          var _result2 = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n          topologyType = _result2[0];\n          setName = _result2[1];\n          maxSetVersion = _result2[2];\n          maxElectionId = _result2[3];\n        } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n          topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n        } else {\n          topologyType = checkHasPrimary(serverDescriptions);\n        }\n      }\n      return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n        heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n        localThresholdMS: this.localThresholdMS\n      });\n    }\n  }, {\n    key: \"hasServer\",\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    value: function hasServer(address) {\n      return this.servers.has(address);\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      var descriptionsWithError = Array.from(this.servers.values()).filter(function (sd) {\n        return sd.error;\n      });\n      if (descriptionsWithError.length > 0) {\n        return descriptionsWithError[0].error;\n      }\n      return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n  }, {\n    key: \"hasKnownServers\",\n    get: function get() {\n      return Array.from(this.servers.values()).some(function (sd) {\n        return sd.type !== common_1.ServerType.Unknown;\n      });\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n  }, {\n    key: \"hasDataBearingServers\",\n    get: function get() {\n      return Array.from(this.servers.values()).some(function (sd) {\n        return sd.isDataBearing;\n      });\n    }\n  }]);\n  return TopologyDescription;\n}();\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n  switch (serverType) {\n    case common_1.ServerType.Standalone:\n      return common_1.TopologyType.Single;\n    case common_1.ServerType.Mongos:\n      return common_1.TopologyType.Sharded;\n    case common_1.ServerType.RSPrimary:\n      return common_1.TopologyType.ReplicaSetWithPrimary;\n    case common_1.ServerType.RSOther:\n    case common_1.ServerType.RSSecondary:\n      return common_1.TopologyType.ReplicaSetNoPrimary;\n    default:\n      return common_1.TopologyType.Unknown;\n  }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription) {\n  var setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxSetVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var maxElectionId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n  var electionId = serverDescription.electionId ? serverDescription.electionId : null;\n  if (serverDescription.setVersion && electionId) {\n    if (maxSetVersion && maxElectionId) {\n      if (maxSetVersion > serverDescription.setVersion || (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n    maxElectionId = serverDescription.electionId;\n  }\n  if (serverDescription.setVersion != null && (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n  // We've heard from the primary. Is it the same primary as before?\n  var _iterator7 = _createForOfIteratorHelper(serverDescriptions),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        address = _step7$value[0],\n        server = _step7$value[1];\n      if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n        // Reset old primary's type to Unknown.\n        serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n        // There can only be one primary\n        break;\n      }\n    }\n    // Discover new hosts from this primary's response.\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  serverDescription.allHosts.forEach(function (address) {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n    }\n  });\n  // Remove hosts not in the response.\n  var currentAddresses = Array.from(serverDescriptions.keys());\n  var responseAddresses = serverDescription.allHosts;\n  currentAddresses.filter(function (addr) {\n    return responseAddresses.indexOf(addr) === -1;\n  }).forEach(function (address) {\n    serverDescriptions.delete(address);\n  });\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription) {\n  var setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (setName == null) {\n    // TODO(NODE-3483): should be an appropriate runtime error\n    throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n  }\n  if (setName !== serverDescription.setName || serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n  return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription) {\n  var setName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n  setName = setName !== null && setName !== void 0 ? setName : serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n  serverDescription.allHosts.forEach(function (address) {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n    }\n  });\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n  return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n  var _iterator8 = _createForOfIteratorHelper(serverDescriptions.values()),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var serverDescription = _step8.value;\n      if (serverDescription.type === common_1.ServerType.RSPrimary) {\n        return common_1.TopologyType.ReplicaSetWithPrimary;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return common_1.TopologyType.ReplicaSetNoPrimary;\n}","map":null,"metadata":{},"sourceType":"script"}