{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\nvar add_user_1 = require(\"./operations/add_user\");\nvar execute_operation_1 = require(\"./operations/execute_operation\");\nvar list_databases_1 = require(\"./operations/list_databases\");\nvar remove_user_1 = require(\"./operations/remove_user\");\nvar run_command_1 = require(\"./operations/run_command\");\nvar validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\nvar Admin = /*#__PURE__*/function () {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  function Admin(db) {\n    _classCallCheck(this, Admin);\n    this.s = {\n      db: db\n    };\n  }\n  _createClass(Admin, [{\n    key: \"command\",\n    value: function command(_command, options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = Object.assign({\n        dbName: 'admin'\n      }, options);\n      return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, _command, options), callback);\n    }\n  }, {\n    key: \"buildInfo\",\n    value: function buildInfo(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return this.command({\n        buildinfo: 1\n      }, options, callback);\n    }\n  }, {\n    key: \"serverInfo\",\n    value: function serverInfo(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return this.command({\n        buildinfo: 1\n      }, options, callback);\n    }\n  }, {\n    key: \"serverStatus\",\n    value: function serverStatus(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return this.command({\n        serverStatus: 1\n      }, options, callback);\n    }\n  }, {\n    key: \"ping\",\n    value: function ping(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return this.command({\n        ping: 1\n      }, options, callback);\n    }\n  }, {\n    key: \"addUser\",\n    value: function addUser(username, password, options, callback) {\n      if (typeof password === 'function') {\n        callback = password, password = undefined, options = {};\n      } else if (typeof password !== 'string') {\n        if (typeof options === 'function') {\n          callback = options, options = password, password = undefined;\n        } else {\n          options = password, callback = undefined, password = undefined;\n        }\n      } else {\n        if (typeof options === 'function') callback = options, options = {};\n      }\n      options = Object.assign({\n        dbName: 'admin'\n      }, options);\n      return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n    }\n  }, {\n    key: \"removeUser\",\n    value: function removeUser(username, options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = Object.assign({\n        dbName: 'admin'\n      }, options);\n      return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n    }\n  }, {\n    key: \"validateCollection\",\n    value: function validateCollection(collectionName, options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n    }\n  }, {\n    key: \"listDatabases\",\n    value: function listDatabases(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n    }\n  }, {\n    key: \"replSetGetStatus\",\n    value: function replSetGetStatus(options, callback) {\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return this.command({\n        replSetGetStatus: 1\n      }, options, callback);\n    }\n  }]);\n  return Admin;\n}();\nexports.Admin = Admin;","map":null,"metadata":{},"sourceType":"script"}