{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSocksClientChainOptions = exports.validateSocksClientOptions = void 0;\nvar util_1 = require(\"./util\");\nvar constants_1 = require(\"./constants\");\nvar stream = require(\"stream\");\n/**\n * Validates the provided SocksClientOptions\n * @param options { SocksClientOptions }\n * @param acceptedCommands { string[] } A list of accepted SocksProxy commands.\n */\nfunction validateSocksClientOptions(options) {\n  var acceptedCommands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['connect', 'bind', 'associate'];\n  // Check SOCKs command option.\n  if (!constants_1.SocksCommand[options.command]) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommand, options);\n  }\n  // Check SocksCommand for acceptable command.\n  if (acceptedCommands.indexOf(options.command) === -1) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandForOperation, options);\n  }\n  // Check destination\n  if (!isValidSocksRemoteHost(options.destination)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n  }\n  // Check SOCKS proxy to use\n  if (!isValidSocksProxy(options.proxy)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n  }\n  // Validate custom auth (if set)\n  validateCustomProxyAuth(options.proxy, options);\n  // Check timeout\n  if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n  }\n  // Check existing_socket (if provided)\n  if (options.existing_socket && !(options.existing_socket instanceof stream.Duplex)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsExistingSocket, options);\n  }\n}\nexports.validateSocksClientOptions = validateSocksClientOptions;\n/**\n * Validates the SocksClientChainOptions\n * @param options { SocksClientChainOptions }\n */\nfunction validateSocksClientChainOptions(options) {\n  // Only connect is supported when chaining.\n  if (options.command !== 'connect') {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandChain, options);\n  }\n  // Check destination\n  if (!isValidSocksRemoteHost(options.destination)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n  }\n  // Validate proxies (length)\n  if (!(options.proxies && Array.isArray(options.proxies) && options.proxies.length >= 2)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxiesLength, options);\n  }\n  // Validate proxies\n  options.proxies.forEach(function (proxy) {\n    if (!isValidSocksProxy(proxy)) {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n    }\n    // Validate custom auth (if set)\n    validateCustomProxyAuth(proxy, options);\n  });\n  // Check timeout\n  if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n    throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n  }\n}\nexports.validateSocksClientChainOptions = validateSocksClientChainOptions;\nfunction validateCustomProxyAuth(proxy, options) {\n  if (proxy.custom_auth_method !== undefined) {\n    // Invalid auth method range\n    if (proxy.custom_auth_method < constants_1.SOCKS5_CUSTOM_AUTH_START || proxy.custom_auth_method > constants_1.SOCKS5_CUSTOM_AUTH_END) {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthRange, options);\n    }\n    // Missing custom_auth_request_handler\n    if (proxy.custom_auth_request_handler === undefined || typeof proxy.custom_auth_request_handler !== 'function') {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n    }\n    // Missing custom_auth_response_size\n    if (proxy.custom_auth_response_size === undefined) {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n    }\n    // Missing/invalid custom_auth_response_handler\n    if (proxy.custom_auth_response_handler === undefined || typeof proxy.custom_auth_response_handler !== 'function') {\n      throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n    }\n  }\n}\n/**\n * Validates a SocksRemoteHost\n * @param remoteHost { SocksRemoteHost }\n */\nfunction isValidSocksRemoteHost(remoteHost) {\n  return remoteHost && typeof remoteHost.host === 'string' && typeof remoteHost.port === 'number' && remoteHost.port >= 0 && remoteHost.port <= 65535;\n}\n/**\n * Validates a SocksProxy\n * @param proxy { SocksProxy }\n */\nfunction isValidSocksProxy(proxy) {\n  return proxy && (typeof proxy.host === 'string' || typeof proxy.ipaddress === 'string') && typeof proxy.port === 'number' && proxy.port >= 0 && proxy.port <= 65535 && (proxy.type === 4 || proxy.type === 5);\n}\n/**\n * Validates a timeout value.\n * @param value { Number }\n */\nfunction isValidTimeoutValue(value) {\n  return typeof value === 'number' && value > 0;\n}","map":null,"metadata":{},"sourceType":"script"}