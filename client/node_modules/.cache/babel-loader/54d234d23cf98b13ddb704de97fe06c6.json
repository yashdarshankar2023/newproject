{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LoggerLevel = void 0;\nvar util_1 = require(\"util\");\nvar error_1 = require(\"./error\");\nvar utils_1 = require(\"./utils\");\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level;\n// Save the process id\nvar pid = process.pid;\n// current logger\n// eslint-disable-next-line no-console\nvar _currentLogger = console.warn;\n/** @public */\nexports.LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n});\n/**\n * @public\n */\nvar Logger = /*#__PURE__*/function () {\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  function Logger(className, options) {\n    _classCallCheck(this, Logger);\n    options = options !== null && options !== void 0 ? options : {};\n    // Current reference\n    this.className = className;\n    // Current logger\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      _currentLogger = options.logger;\n    }\n    // Set level of logging, default is error\n    if (options.loggerLevel) {\n      level = options.loggerLevel || exports.LoggerLevel.ERROR;\n    }\n    // Add all class names\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n  _createClass(Logger, [{\n    key: \"debug\",\n    value: function debug(message, object) {\n      if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n        var dateTime = new Date().getTime();\n        var msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n        var state = {\n          type: exports.LoggerLevel.DEBUG,\n          message: message,\n          className: this.className,\n          pid: pid,\n          date: dateTime\n        };\n        if (object) state.meta = object;\n        _currentLogger(msg, state);\n      }\n    }\n    /**\n     * Log a message at the warn level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n  }, {\n    key: \"warn\",\n    value: function warn(message, object) {\n      if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n        var dateTime = new Date().getTime();\n        var msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n        var state = {\n          type: exports.LoggerLevel.WARN,\n          message: message,\n          className: this.className,\n          pid: pid,\n          date: dateTime\n        };\n        if (object) state.meta = object;\n        _currentLogger(msg, state);\n      }\n    }\n    /**\n     * Log a message at the info level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n  }, {\n    key: \"info\",\n    value: function info(message, object) {\n      if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n        var dateTime = new Date().getTime();\n        var msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n        var state = {\n          type: exports.LoggerLevel.INFO,\n          message: message,\n          className: this.className,\n          pid: pid,\n          date: dateTime\n        };\n        if (object) state.meta = object;\n        _currentLogger(msg, state);\n      }\n    }\n    /**\n     * Log a message at the error level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n  }, {\n    key: \"error\",\n    value: function error(message, object) {\n      if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n        var dateTime = new Date().getTime();\n        var msg = (0, util_1.format)('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n        var state = {\n          type: exports.LoggerLevel.ERROR,\n          message: message,\n          className: this.className,\n          pid: pid,\n          date: dateTime\n        };\n        if (object) state.meta = object;\n        _currentLogger(msg, state);\n      }\n    } /** Is the logger set at info level */\n  }, {\n    key: \"isInfo\",\n    value: function isInfo() {\n      return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    } /** Is the logger set at error level */\n  }, {\n    key: \"isError\",\n    value: function isError() {\n      return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    } /** Is the logger set at error level */\n  }, {\n    key: \"isWarn\",\n    value: function isWarn() {\n      return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.WARN || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    } /** Is the logger set at debug level */\n  }, {\n    key: \"isDebug\",\n    value: function isDebug() {\n      return level === exports.LoggerLevel.DEBUG;\n    } /** Resets the logger to default settings, error and no filtered classes */\n  }], [{\n    key: \"reset\",\n    value: function reset() {\n      level = exports.LoggerLevel.ERROR;\n      filteredClasses = {};\n    } /** Get the current logger function */\n  }, {\n    key: \"currentLogger\",\n    value: function currentLogger() {\n      return _currentLogger;\n    }\n    /**\n     * Set the current logger function\n     *\n     * @param logger - Custom logging function\n     */\n  }, {\n    key: \"setCurrentLogger\",\n    value: function setCurrentLogger(logger) {\n      if (typeof logger !== 'function') {\n        throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n      }\n      _currentLogger = logger;\n    }\n    /**\n     * Filter log messages for a particular class\n     *\n     * @param type - The type of filter (currently only class)\n     * @param values - The filters to apply\n     */\n  }, {\n    key: \"filter\",\n    value: function filter(type, values) {\n      if (type === 'class' && Array.isArray(values)) {\n        filteredClasses = {};\n        values.forEach(function (x) {\n          return filteredClasses[x] = true;\n        });\n      }\n    }\n    /**\n     * Set the current log level\n     *\n     * @param newLevel - Set current log level (debug, warn, info, error)\n     */\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(newLevel) {\n      if (newLevel !== exports.LoggerLevel.INFO && newLevel !== exports.LoggerLevel.ERROR && newLevel !== exports.LoggerLevel.DEBUG && newLevel !== exports.LoggerLevel.WARN) {\n        throw new error_1.MongoInvalidArgumentError(\"Argument \\\"newLevel\\\" should be one of \".concat((0, utils_1.enumToString)(exports.LoggerLevel)));\n      }\n      level = newLevel;\n    }\n  }]);\n  return Logger;\n}();\nexports.Logger = Logger;","map":null,"metadata":{},"sourceType":"script"}