{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\nvar util_1 = require(\"util\");\nvar collection_1 = require(\"./collection\");\nvar constants_1 = require(\"./constants\");\nvar change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nvar db_1 = require(\"./db\");\nvar error_1 = require(\"./error\");\nvar mongo_client_1 = require(\"./mongo_client\");\nvar mongo_types_1 = require(\"./mongo_types\");\nvar utils_1 = require(\"./utils\");\n/** @internal */\nvar kCursorStream = Symbol('cursorStream');\n/** @internal */\nvar kClosed = Symbol('closed');\n/** @internal */\nvar kMode = Symbol('mode');\nvar CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nvar CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nvar CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nvar NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nvar CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nvar ChangeStream = /*#__PURE__*/function (_mongo_types_1$TypedE) {\n  _inherits(ChangeStream, _mongo_types_1$TypedE);\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  function ChangeStream(parent) {\n    var _this;\n    var pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, ChangeStream);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStream).call(this));\n    /**\n     * @internal\n     *\n     * TODO(NODE-4320): promisify selectServer and refactor this code to be async\n     *\n     * we promisify _processErrorIteratorModeCallback until we have a promisifed version of selectServer.\n     */\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    _this._processErrorIteratorMode = (0, util_1.promisify)(_this._processErrorIteratorModeCallback);\n    _this.pipeline = pipeline;\n    _this.options = options;\n    if (parent instanceof collection_1.Collection) {\n      _this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      _this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      _this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    _this.parent = parent;\n    _this.namespace = parent.s.namespace;\n    if (!_this.options.readPreference && parent.readPreference) {\n      _this.options.readPreference = parent.readPreference;\n    }\n    // Create contained Change Stream cursor\n    _this.cursor = _this._createChangeStreamCursor(options);\n    _this[kClosed] = false;\n    _this[kMode] = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    _this.on('newListener', function (eventName) {\n      if (eventName === 'change' && _this.cursor && _this.listenerCount('change') === 0) {\n        _this._streamEvents(_this.cursor);\n      }\n    });\n    _this.on('removeListener', function (eventName) {\n      var _a;\n      if (eventName === 'change' && _this.listenerCount('change') === 0 && _this.cursor) {\n        (_a = _this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n    return _this;\n  }\n  /** @internal */\n  _createClass(ChangeStream, [{\n    key: \"hasNext\",\n    value: function hasNext(callback) {\n      var _this2 = this;\n      this._setIsIterator();\n      // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n      // Shadowing is intentional here.  We want to override the `callback` variable\n      // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n      return (0, utils_1.maybePromise)(callback, function (callback) {\n        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var hasNext, _hasNext;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return _this2.cursor.hasNext();\n                case 3:\n                  hasNext = _context.sent;\n                  return _context.abrupt(\"return\", hasNext);\n                case 7:\n                  _context.prev = 7;\n                  _context.t0 = _context[\"catch\"](0);\n                  _context.prev = 9;\n                  _context.next = 12;\n                  return _this2._processErrorIteratorMode(_context.t0);\n                case 12:\n                  _context.next = 14;\n                  return _this2.cursor.hasNext();\n                case 14:\n                  _hasNext = _context.sent;\n                  return _context.abrupt(\"return\", _hasNext);\n                case 18:\n                  _context.prev = 18;\n                  _context.t1 = _context[\"catch\"](9);\n                  _context.next = 22;\n                  return _this2.close().catch(function (err) {\n                    return err;\n                  });\n                case 22:\n                  throw _context.t1;\n                case 23:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 7], [9, 18]]);\n        }))().then(function (hasNext) {\n          return callback(undefined, hasNext);\n        }, function (error) {\n          return callback(error);\n        });\n      });\n    }\n  }, {\n    key: \"next\",\n    value: function next(callback) {\n      var _this3 = this;\n      this._setIsIterator();\n      // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n      // Shadowing is intentional here.  We want to override the `callback` variable\n      // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n      return (0, utils_1.maybePromise)(callback, function (callback) {\n        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var change, processedChange, _change, _processedChange;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return _this3.cursor.next();\n                case 3:\n                  change = _context2.sent;\n                  processedChange = _this3._processChange(change !== null && change !== void 0 ? change : null);\n                  return _context2.abrupt(\"return\", processedChange);\n                case 8:\n                  _context2.prev = 8;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  _context2.prev = 10;\n                  _context2.next = 13;\n                  return _this3._processErrorIteratorMode(_context2.t0);\n                case 13:\n                  _context2.next = 15;\n                  return _this3.cursor.next();\n                case 15:\n                  _change = _context2.sent;\n                  _processedChange = _this3._processChange(_change !== null && _change !== void 0 ? _change : null);\n                  return _context2.abrupt(\"return\", _processedChange);\n                case 20:\n                  _context2.prev = 20;\n                  _context2.t1 = _context2[\"catch\"](10);\n                  _context2.next = 24;\n                  return _this3.close().catch(function (err) {\n                    return err;\n                  });\n                case 24:\n                  throw _context2.t1;\n                case 25:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 8], [10, 20]]);\n        }))().then(function (change) {\n          return callback(undefined, change);\n        }, function (error) {\n          return callback(error);\n        });\n      });\n    }\n  }, {\n    key: \"tryNext\",\n    value: function tryNext(callback) {\n      var _this4 = this;\n      this._setIsIterator();\n      // TOOD(NODE-4319): Add eslint rule preventing accidental variable shadowing\n      // Shadowing is intentional here.  We want to override the `callback` variable\n      // from the outer scope so that the inner scope doesn't accidentally call the wrong callback.\n      return (0, utils_1.maybePromise)(callback, function (callback) {\n        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var change, _change2;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return _this4.cursor.tryNext();\n                case 3:\n                  change = _context3.sent;\n                  return _context3.abrupt(\"return\", change !== null && change !== void 0 ? change : null);\n                case 7:\n                  _context3.prev = 7;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  _context3.prev = 9;\n                  _context3.next = 12;\n                  return _this4._processErrorIteratorMode(_context3.t0);\n                case 12:\n                  _context3.next = 14;\n                  return _this4.cursor.tryNext();\n                case 14:\n                  _change2 = _context3.sent;\n                  return _context3.abrupt(\"return\", _change2 !== null && _change2 !== void 0 ? _change2 : null);\n                case 18:\n                  _context3.prev = 18;\n                  _context3.t1 = _context3[\"catch\"](9);\n                  _context3.next = 22;\n                  return _this4.close().catch(function (err) {\n                    return err;\n                  });\n                case 22:\n                  throw _context3.t1;\n                case 23:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 7], [9, 18]]);\n        }))().then(function (change) {\n          return callback(undefined, change);\n        }, function (error) {\n          return callback(error);\n        });\n      });\n    } /** Is the cursor closed */\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this5 = this;\n      this[kClosed] = true;\n      return (0, utils_1.maybePromise)(callback, function (cb) {\n        var cursor = _this5.cursor;\n        return cursor.close(function (err) {\n          _this5._endStream();\n          return cb(err);\n        });\n      });\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      if (this.closed) {\n        throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n      }\n      this.streamOptions = options;\n      return this.cursor.stream(options);\n    } /** @internal */\n  }, {\n    key: \"_setIsEmitter\",\n    value: function _setIsEmitter() {\n      if (this[kMode] === 'iterator') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n      }\n      this[kMode] = 'emitter';\n    } /** @internal */\n  }, {\n    key: \"_setIsIterator\",\n    value: function _setIsIterator() {\n      if (this[kMode] === 'emitter') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n      }\n      this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n  }, {\n    key: \"_createChangeStreamCursor\",\n    value: function _createChangeStreamCursor(options) {\n      var _this6 = this;\n      var changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n      if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n        changeStreamStageOptions.allChangesForCluster = true;\n      }\n      var pipeline = [{\n        $changeStream: changeStreamStageOptions\n      }].concat(_toConsumableArray(this.pipeline));\n      var client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n      if (client == null) {\n        // This should never happen because of the assertion in the constructor\n        throw new error_1.MongoRuntimeError(\"Changestream type should only be one of cluster, database, collection. Found \".concat(this.type.toString()));\n      }\n      var changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n      var _iterator = _createForOfIteratorHelper(CHANGE_STREAM_EVENTS),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var event = _step.value;\n          changeStreamCursor.on(event, function (e) {\n            return _this6.emit(event, e);\n          });\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n        this._streamEvents(changeStreamCursor);\n      }\n      return changeStreamCursor;\n    } /** @internal */\n  }, {\n    key: \"_closeEmitterModeWithError\",\n    value: function _closeEmitterModeWithError(error) {\n      this.emit(ChangeStream.ERROR, error);\n      this.close(function () {\n        // nothing to do\n      });\n    } /** @internal */\n  }, {\n    key: \"_streamEvents\",\n    value: function _streamEvents(cursor) {\n      var _this7 = this;\n      var _a;\n      this._setIsEmitter();\n      var stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n      this[kCursorStream] = stream;\n      stream.on('data', function (change) {\n        try {\n          var processedChange = _this7._processChange(change);\n          _this7.emit(ChangeStream.CHANGE, processedChange);\n        } catch (error) {\n          _this7.emit(ChangeStream.ERROR, error);\n        }\n      });\n      stream.on('error', function (error) {\n        return _this7._processErrorStreamMode(error);\n      });\n    } /** @internal */\n  }, {\n    key: \"_endStream\",\n    value: function _endStream() {\n      var cursorStream = this[kCursorStream];\n      if (cursorStream) {\n        ['data', 'close', 'end', 'error'].forEach(function (event) {\n          return cursorStream.removeAllListeners(event);\n        });\n        cursorStream.destroy();\n      }\n      this[kCursorStream] = undefined;\n    } /** @internal */\n  }, {\n    key: \"_processChange\",\n    value: function _processChange(change) {\n      if (this[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n      }\n      // a null change means the cursor has been notified, implicitly closing the change stream\n      if (change == null) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n      }\n      if (change && !change._id) {\n        throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n      }\n      // cache the resume token\n      this.cursor.cacheResumeToken(change._id);\n      // wipe the startAtOperationTime if there was one so that there won't be a conflict\n      // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n      this.options.startAtOperationTime = undefined;\n      return change;\n    } /** @internal */\n  }, {\n    key: \"_processErrorStreamMode\",\n    value: function _processErrorStreamMode(changeStreamError) {\n      var _this8 = this;\n      // If the change stream has been closed explicitly, do not process error.\n      if (this[kClosed]) return;\n      if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n        this._endStream();\n        this.cursor.close().catch(function () {\n          return null;\n        });\n        var topology = (0, utils_1.getTopology)(this.parent);\n        topology.selectServer(this.cursor.readPreference, {}, function (serverSelectionError) {\n          if (serverSelectionError) return _this8._closeEmitterModeWithError(changeStreamError);\n          _this8.cursor = _this8._createChangeStreamCursor(_this8.cursor.resumeOptions);\n        });\n      } else {\n        this._closeEmitterModeWithError(changeStreamError);\n      }\n    } /** @internal */\n  }, {\n    key: \"_processErrorIteratorModeCallback\",\n    value: function _processErrorIteratorModeCallback(changeStreamError, callback) {\n      var _this9 = this;\n      if (this[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        return callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      }\n      if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n        this.cursor.close().catch(function () {\n          return null;\n        });\n        var topology = (0, utils_1.getTopology)(this.parent);\n        topology.selectServer(this.cursor.readPreference, {}, function (serverSelectionError) {\n          // if the topology can't reconnect, close the stream\n          if (serverSelectionError) return _this9.close(function () {\n            return callback(changeStreamError);\n          });\n          _this9.cursor = _this9._createChangeStreamCursor(_this9.cursor.resumeOptions);\n          callback();\n        });\n      } else {\n        this.close(function () {\n          return callback(changeStreamError);\n        });\n      }\n    }\n  }, {\n    key: \"cursorStream\",\n    get: function get() {\n      return this[kCursorStream];\n    } /** The cached resume token that is used to resume after the most recently returned change. */\n  }, {\n    key: \"resumeToken\",\n    get: function get() {\n      var _a;\n      return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this[kClosed] || this.cursor.closed;\n    }\n  }]);\n  return ChangeStream;\n}(mongo_types_1.TypedEventEmitter);\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;","map":null,"metadata":{},"sourceType":"script"}