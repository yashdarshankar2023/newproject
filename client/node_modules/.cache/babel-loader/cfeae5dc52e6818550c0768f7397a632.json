{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\nvar error_1 = require(\"../error\");\nvar count_1 = require(\"../operations/count\");\nvar execute_operation_1 = require(\"../operations/execute_operation\");\nvar find_1 = require(\"../operations/find\");\nvar sort_1 = require(\"../sort\");\nvar utils_1 = require(\"../utils\");\nvar abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nvar kFilter = Symbol('filter');\n/** @internal */\nvar kNumReturned = Symbol('numReturned');\n/** @internal */\nvar kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nvar FindCursor = /*#__PURE__*/function (_abstract_cursor_1$Ab) {\n  _inherits(FindCursor, _abstract_cursor_1$Ab);\n  /** @internal */\n  function FindCursor(client, namespace, filter) {\n    var _this;\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, FindCursor);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindCursor).call(this, client, namespace, options));\n    _this[kFilter] = filter || {};\n    _this[kBuiltOptions] = options;\n    if (options.sort != null) {\n      _this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n    return _this;\n  }\n  _createClass(FindCursor, [{\n    key: \"clone\",\n    value: function clone() {\n      var clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n      delete clonedOptions.session;\n      return new FindCursor(this.client, this.namespace, this[kFilter], _objectSpread({}, clonedOptions));\n    }\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      return _get(_getPrototypeOf(FindCursor.prototype), \"map\", this).call(this, transform);\n    } /** @internal */\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(session, callback) {\n      var _this2 = this;\n      var findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread({}, this[kBuiltOptions], this.cursorOptions, {\n        session: session\n      }));\n      (0, execute_operation_1.executeOperation)(this.client, findOperation, function (err, response) {\n        if (err || response == null) return callback(err);\n        // TODO: We only need this for legacy queries that do not support `limit`, maybe\n        //       the value should only be saved in those cases.\n        if (response.cursor) {\n          _this2[kNumReturned] = response.cursor.firstBatch.length;\n        } else {\n          _this2[kNumReturned] = response.documents ? response.documents.length : 0;\n        }\n        // TODO: NODE-2882\n        callback(undefined, {\n          server: findOperation.server,\n          session: session,\n          response: response\n        });\n      });\n    } /** @internal */\n  }, {\n    key: \"_getMore\",\n    value: function _getMore(batchSize, callback) {\n      var _this3 = this;\n      // NOTE: this is to support client provided limits in pre-command servers\n      var numReturned = this[kNumReturned];\n      if (numReturned) {\n        var limit = this[kBuiltOptions].limit;\n        batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n        if (batchSize <= 0) {\n          return this.close(callback);\n        }\n      }\n      _get(_getPrototypeOf(FindCursor.prototype), \"_getMore\", this).call(this, batchSize, function (err, response) {\n        if (err) return callback(err);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n          _this3[kNumReturned] = _this3[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        callback(undefined, response);\n      });\n    }\n  }, {\n    key: \"count\",\n    value: function count(options, callback) {\n      (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n      if (typeof options === 'boolean') {\n        throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n      }\n      if (typeof options === 'function') callback = options, options = {};\n      options = options !== null && options !== void 0 ? options : {};\n      return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], _objectSpread({}, this[kBuiltOptions], this.cursorOptions, options)), callback);\n    }\n  }, {\n    key: \"explain\",\n    value: function explain(verbosity, callback) {\n      if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n      if (verbosity == null) verbosity = true;\n      return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], _objectSpread({}, this[kBuiltOptions], this.cursorOptions, {\n        explain: verbosity\n      })), callback);\n    } /** Set the cursor query */\n  }, {\n    key: \"filter\",\n    value: function filter(_filter) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kFilter] = _filter;\n      return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n  }, {\n    key: \"hint\",\n    value: function hint(_hint) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].hint = _hint;\n      return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].min = _min;\n      return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].max = _max;\n      return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n  }, {\n    key: \"returnKey\",\n    value: function returnKey(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].returnKey = value;\n      return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n  }, {\n    key: \"showRecordId\",\n    value: function showRecordId(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].showRecordId = value;\n      return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n  }, {\n    key: \"addQueryModifier\",\n    value: function addQueryModifier(name, value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (name[0] !== '$') {\n        throw new error_1.MongoInvalidArgumentError(\"\".concat(name, \" is not a valid query modifier\"));\n      }\n      // Strip of the $\n      var field = name.substr(1);\n      // NOTE: consider some TS magic for this\n      switch (field) {\n        case 'comment':\n          this[kBuiltOptions].comment = value;\n          break;\n        case 'explain':\n          this[kBuiltOptions].explain = value;\n          break;\n        case 'hint':\n          this[kBuiltOptions].hint = value;\n          break;\n        case 'max':\n          this[kBuiltOptions].max = value;\n          break;\n        case 'maxTimeMS':\n          this[kBuiltOptions].maxTimeMS = value;\n          break;\n        case 'min':\n          this[kBuiltOptions].min = value;\n          break;\n        case 'orderby':\n          this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n          break;\n        case 'query':\n          this[kFilter] = value;\n          break;\n        case 'returnKey':\n          this[kBuiltOptions].returnKey = value;\n          break;\n        case 'showDiskLoc':\n          this[kBuiltOptions].showRecordId = value;\n          break;\n        default:\n          throw new error_1.MongoInvalidArgumentError(\"Invalid query modifier: \".concat(name));\n      }\n      return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n  }, {\n    key: \"comment\",\n    value: function comment(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].comment = value;\n      return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n  }, {\n    key: \"maxAwaitTimeMS\",\n    value: function maxAwaitTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxAwaitTimeMS = value;\n      return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n  }, {\n    key: \"maxTimeMS\",\n    value: function maxTimeMS(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n      }\n      this[kBuiltOptions].maxTimeMS = value;\n      return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n  }, {\n    key: \"project\",\n    value: function project(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].projection = value;\n      return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(_sort, direction) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n      }\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(_sort, direction);\n      return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n  }, {\n    key: \"allowDiskUse\",\n    value: function allowDiskUse() {\n      var allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (!this[kBuiltOptions].sort) {\n        throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n      }\n      // As of 6.0 the default is true. This allows users to get back to the old behaviour.\n      if (!allow) {\n        this[kBuiltOptions].allowDiskUse = false;\n        return this;\n      }\n      this[kBuiltOptions].allowDiskUse = true;\n      return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n  }, {\n    key: \"collation\",\n    value: function collation(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      this[kBuiltOptions].collation = value;\n      return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n      }\n      this[kBuiltOptions].limit = value;\n      return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(value) {\n      (0, abstract_cursor_1.assertUninitialized)(this);\n      if (this[kBuiltOptions].tailable) {\n        throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n      }\n      if (typeof value !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n      }\n      this[kBuiltOptions].skip = value;\n      return this;\n    }\n  }]);\n  return FindCursor;\n}(abstract_cursor_1.AbstractCursor);\nexports.FindCursor = FindCursor;","map":null,"metadata":{},"sourceType":"script"}