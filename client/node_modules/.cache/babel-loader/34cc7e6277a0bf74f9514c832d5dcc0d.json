{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\nvar index_1 = __importStar(require(\"./index\"));\nfunction redactValidConnectionString(inputUrl, options) {\n  var _a, _b;\n  var url = inputUrl.clone();\n  var replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n  var redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n  if ((url.username || url.password) && redactUsernames) {\n    url.username = replacementString;\n    url.password = '';\n  } else if (url.password) {\n    url.password = replacementString;\n  }\n  if (url.searchParams.has('authMechanismProperties')) {\n    var props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n    if (props.get('AWS_SESSION_TOKEN')) {\n      props.set('AWS_SESSION_TOKEN', replacementString);\n      url.searchParams.set('authMechanismProperties', props.toString());\n    }\n  }\n  if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n    url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n  }\n  if (url.searchParams.has('proxyUsername') && redactUsernames) {\n    url.searchParams.set('proxyUsername', replacementString);\n  }\n  if (url.searchParams.has('proxyPassword')) {\n    url.searchParams.set('proxyPassword', replacementString);\n  }\n  return url;\n}\nexports.redactValidConnectionString = redactValidConnectionString;\nfunction redactConnectionString(uri, options) {\n  var _a, _b;\n  var replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n  var redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n  var parsed;\n  try {\n    parsed = new index_1.default(uri);\n  } catch (_c) {}\n  if (parsed) {\n    options = _objectSpread({}, options, {\n      replacementString: '___credentials___'\n    });\n    return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n  }\n  var regexes = [redactUsernames ? /(?<=\\/\\/)(.*)(?=@)/g : /(?<=\\/\\/[^@]+:)(.*)(?=@)/g, /(?<=AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, /(?<=tlsCertificateKeyFilePassword=)([^&]+)/gi, redactUsernames ? /(?<=proxyUsername=)([^&]+)/gi : null, /(?<=proxyPassword=)([^&]+)/gi];\n  for (var _i = 0, _regexes = regexes; _i < _regexes.length; _i++) {\n    var r = _regexes[_i];\n    if (r !== null) {\n      uri = uri.replace(r, replacementString);\n    }\n  }\n  return uri;\n}\nexports.redactConnectionString = redactConnectionString;","map":null,"metadata":{},"sourceType":"script"}