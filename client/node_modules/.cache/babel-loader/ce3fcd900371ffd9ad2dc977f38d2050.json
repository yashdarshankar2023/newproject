{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nvar error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\nvar ReadPreference = /*#__PURE__*/function () {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  function ReadPreference(mode, tags, options) {\n    _classCallCheck(this, ReadPreference);\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(\"Invalid read preference mode \".concat(JSON.stringify(mode)));\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options === null || options === void 0 ? void 0 : options.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options !== null && options !== void 0 ? options : {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  }\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  _createClass(ReadPreference, [{\n    key: \"isValid\",\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    value: function isValid(mode) {\n      return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"secondaryOk\" bit when sent over the wire\n     * @deprecated Use secondaryOk instead\n     * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n     */\n  }, {\n    key: \"slaveOk\",\n    value: function slaveOk() {\n      return this.secondaryOk();\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n     */\n  }, {\n    key: \"secondaryOk\",\n    value: function secondaryOk() {\n      var NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n      return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(readPreference) {\n      return readPreference.mode === this.mode;\n    } /** Return JSON representation */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var readPreference = {\n        mode: this.mode\n      };\n      if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n      if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n      if (this.hedge) readPreference.hedge = this.hedge;\n      return readPreference;\n    }\n  }, {\n    key: \"preference\",\n    get: function get() {\n      return this.mode;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(mode) {\n      return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n  }, {\n    key: \"fromOptions\",\n    value: function fromOptions(options) {\n      var _a, _b, _c;\n      if (!options) return;\n      var readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : (_b = options.session) === null || _b === void 0 ? void 0 : _b.transaction.options.readPreference;\n      var readPreferenceTags = options.readPreferenceTags;\n      if (readPreference == null) {\n        return;\n      }\n      if (typeof readPreference === 'string') {\n        return new ReadPreference(readPreference, readPreferenceTags, {\n          maxStalenessSeconds: options.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n        var mode = readPreference.mode || readPreference.preference;\n        if (mode && typeof mode === 'string') {\n          return new ReadPreference(mode, (_c = readPreference.tags) !== null && _c !== void 0 ? _c : readPreferenceTags, {\n            maxStalenessSeconds: readPreference.maxStalenessSeconds,\n            hedge: options.hedge\n          });\n        }\n      }\n      if (readPreferenceTags) {\n        readPreference.tags = readPreferenceTags;\n      }\n      return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n  }, {\n    key: \"translate\",\n    value: function translate(options) {\n      if (options.readPreference == null) return options;\n      var r = options.readPreference;\n      if (typeof r === 'string') {\n        options.readPreference = new ReadPreference(r);\n      } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n        var mode = r.mode || r.preference;\n        if (mode && typeof mode === 'string') {\n          options.readPreference = new ReadPreference(mode, r.tags, {\n            maxStalenessSeconds: r.maxStalenessSeconds\n          });\n        }\n      } else if (!(r instanceof ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference: \".concat(r));\n      }\n      return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid(mode) {\n      var VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n      return VALID_MODES.has(mode);\n    }\n  }]);\n  return ReadPreference;\n}();\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);","map":null,"metadata":{},"sourceType":"script"}