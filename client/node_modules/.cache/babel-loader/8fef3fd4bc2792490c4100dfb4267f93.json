{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar punycode = require(\"punycode\");\nvar regexes = require(\"./lib/regexes.js\");\nvar mappingTable = require(\"./lib/mappingTable.json\");\nvar _require = require(\"./lib/statusMapping.js\"),\n  STATUS_MAPPING = _require.STATUS_MAPPING;\nfunction containsNonASCII(str) {\n  return /(?:(?![\\0-\\x7F])[\\s\\S])/.test(str);\n}\nfunction findStatus(val, _ref) {\n  var useSTD3ASCIIRules = _ref.useSTD3ASCIIRules;\n  var start = 0;\n  var end = mappingTable.length - 1;\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n    var target = mappingTable[mid];\n    var min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    var max = Array.isArray(target[0]) ? target[0][1] : target[0];\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed].concat(_toConsumableArray(target.slice(2)));\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid].concat(_toConsumableArray(target.slice(2)));\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped].concat(_toConsumableArray(target.slice(2)));\n      }\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return null;\n}\nfunction mapChars(domainName, _ref2) {\n  var useSTD3ASCIIRules = _ref2.useSTD3ASCIIRules,\n    processingOption = _ref2.processingOption;\n  var hasError = false;\n  var processed = \"\";\n  var _iterator = _createForOfIteratorHelper(domainName),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var ch = _step.value;\n      var _findStatus = findStatus(ch.codePointAt(0), {\n          useSTD3ASCIIRules: useSTD3ASCIIRules\n        }),\n        _findStatus2 = _slicedToArray(_findStatus, 2),\n        status = _findStatus2[0],\n        mapping = _findStatus2[1];\n      switch (status) {\n        case STATUS_MAPPING.disallowed:\n          hasError = true;\n          processed += ch;\n          break;\n        case STATUS_MAPPING.ignored:\n          break;\n        case STATUS_MAPPING.mapped:\n          processed += mapping;\n          break;\n        case STATUS_MAPPING.deviation:\n          if (processingOption === \"transitional\") {\n            processed += mapping;\n          } else {\n            processed += ch;\n          }\n          break;\n        case STATUS_MAPPING.valid:\n          processed += ch;\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    string: processed,\n    error: hasError\n  };\n}\nfunction validateLabel(label, _ref3) {\n  var checkHyphens = _ref3.checkHyphens,\n    checkBidi = _ref3.checkBidi,\n    checkJoiners = _ref3.checkJoiners,\n    processingOption = _ref3.processingOption,\n    useSTD3ASCIIRules = _ref3.useSTD3ASCIIRules;\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n  var codePoints = Array.from(label);\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n  for (var _i = 0, _codePoints = codePoints; _i < _codePoints.length; _i++) {\n    var ch = _codePoints[_i];\n    var _findStatus3 = findStatus(ch.codePointAt(0), {\n        useSTD3ASCIIRules: useSTD3ASCIIRules\n      }),\n      _findStatus4 = _slicedToArray(_findStatus3, 1),\n      status = _findStatus4[0];\n    if (processingOption === \"transitional\" && status !== STATUS_MAPPING.valid || processingOption === \"nontransitional\" && status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    var last = 0;\n    var _iterator2 = _createForOfIteratorHelper(codePoints.entries()),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          i = _step2$value[0],\n          _ch = _step2$value[1];\n        if (_ch === \"\\u200C\" || _ch === \"\\u200D\") {\n          if (i > 0) {\n            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n              continue;\n            }\n            if (_ch === \"\\u200C\") {\n              // TODO: make this more efficient\n              var next = codePoints.indexOf(\"\\u200C\", i + 1);\n              var test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n              if (regexes.validZWNJ.test(test.join(\"\"))) {\n                last = i + 1;\n                continue;\n              }\n            }\n          }\n          return false;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    var rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n  return true;\n}\nfunction isBidiDomain(labels) {\n  var domain = labels.map(function (label) {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\nfunction processing(domainName, options) {\n  var processingOption = options.processingOption; // 1. Map.\n  var _mapChars = mapChars(domainName, options),\n    string = _mapChars.string,\n    error = _mapChars.error; // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  var labels = string.split(\".\");\n  var isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  var _iterator3 = _createForOfIteratorHelper(labels.entries()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n        i = _step3$value[0],\n        origLabel = _step3$value[1];\n      var label = origLabel;\n      var curProcessing = processingOption;\n      if (label.startsWith(\"xn--\")) {\n        try {\n          label = punycode.decode(label.substring(4));\n          labels[i] = label;\n        } catch (err) {\n          error = true;\n          continue;\n        }\n        curProcessing = \"nontransitional\";\n      }\n\n      // No need to validate if we already know there is an error.\n      if (error) {\n        continue;\n      }\n      var validation = validateLabel(label, _objectSpread({}, options, {\n        processingOption: curProcessing,\n        checkBidi: options.checkBidi && isBidi\n      }));\n      if (!validation) {\n        error = true;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return {\n    string: labels.join(\".\"),\n    error: error\n  };\n}\nfunction toASCII(domainName) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref4$checkHyphens = _ref4.checkHyphens,\n    checkHyphens = _ref4$checkHyphens === void 0 ? false : _ref4$checkHyphens,\n    _ref4$checkBidi = _ref4.checkBidi,\n    checkBidi = _ref4$checkBidi === void 0 ? false : _ref4$checkBidi,\n    _ref4$checkJoiners = _ref4.checkJoiners,\n    checkJoiners = _ref4$checkJoiners === void 0 ? false : _ref4$checkJoiners,\n    _ref4$useSTD3ASCIIRul = _ref4.useSTD3ASCIIRules,\n    useSTD3ASCIIRules = _ref4$useSTD3ASCIIRul === void 0 ? false : _ref4$useSTD3ASCIIRul,\n    _ref4$processingOptio = _ref4.processingOption,\n    processingOption = _ref4$processingOptio === void 0 ? \"nontransitional\" : _ref4$processingOptio,\n    _ref4$verifyDNSLength = _ref4.verifyDNSLength,\n    verifyDNSLength = _ref4$verifyDNSLength === void 0 ? false : _ref4$verifyDNSLength;\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n  var result = processing(domainName, {\n    processingOption: processingOption,\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  var labels = result.string.split(\".\");\n  labels = labels.map(function (l) {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\".concat(punycode.encode(l));\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n  if (verifyDNSLength) {\n    var total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n    for (var i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\nfunction toUnicode(domainName) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref5$checkHyphens = _ref5.checkHyphens,\n    checkHyphens = _ref5$checkHyphens === void 0 ? false : _ref5$checkHyphens,\n    _ref5$checkBidi = _ref5.checkBidi,\n    checkBidi = _ref5$checkBidi === void 0 ? false : _ref5$checkBidi,\n    _ref5$checkJoiners = _ref5.checkJoiners,\n    checkJoiners = _ref5$checkJoiners === void 0 ? false : _ref5$checkJoiners,\n    _ref5$useSTD3ASCIIRul = _ref5.useSTD3ASCIIRules,\n    useSTD3ASCIIRules = _ref5$useSTD3ASCIIRul === void 0 ? false : _ref5$useSTD3ASCIIRul,\n    _ref5$processingOptio = _ref5.processingOption,\n    processingOption = _ref5$processingOptio === void 0 ? \"nontransitional\" : _ref5$processingOptio;\n  var result = processing(domainName, {\n    processingOption: processingOption,\n    checkHyphens: checkHyphens,\n    checkBidi: checkBidi,\n    checkJoiners: checkJoiners,\n    useSTD3ASCIIRules: useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\nmodule.exports = {\n  toASCII: toASCII,\n  toUnicode: toUnicode\n};","map":null,"metadata":{},"sourceType":"script"}