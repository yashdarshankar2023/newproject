{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\nvar utils = require(\"./utils.js\");\nexports.convert = function (globalObject, value) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$context = _ref.context,\n    context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n  function invokeTheCallbackFunction() {\n    var thisArg = utils.tryWrapperForImpl(this);\n    var callResult;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    for (var i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n    callResult = Reflect.apply(value, thisArg, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context,\n      globals: globalObject\n    });\n    return callResult;\n  }\n  invokeTheCallbackFunction.construct = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    for (var i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n    var callResult = Reflect.construct(value, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context,\n      globals: globalObject\n    });\n    return callResult;\n  };\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n  return invokeTheCallbackFunction;\n};","map":null,"metadata":{},"sourceType":"script"}