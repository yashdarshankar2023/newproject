{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedBulkOperation = void 0;\nvar BSON = require(\"../bson\");\nvar error_1 = require(\"../error\");\nvar common_1 = require(\"./common\");\n/** @public */\nvar OrderedBulkOperation = /*#__PURE__*/function (_common_1$BulkOperati) {\n  _inherits(OrderedBulkOperation, _common_1$BulkOperati);\n  function OrderedBulkOperation(collection, options) {\n    _classCallCheck(this, OrderedBulkOperation);\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrderedBulkOperation).call(this, collection, options, true));\n  }\n  _createClass(OrderedBulkOperation, [{\n    key: \"addToOperationsList\",\n    value: function addToOperationsList(batchType, document) {\n      // Get the bsonSize\n      var bsonSize = BSON.calculateObjectSize(document, {\n        checkKeys: false,\n        // Since we don't know what the user selected for BSON options here,\n        // err on the safe side, and check the size with ignoreUndefined: false.\n        ignoreUndefined: false\n      });\n      // Throw error if the doc is bigger than the max BSON size\n      if (bsonSize >= this.s.maxBsonObjectSize)\n        // TODO(NODE-3483): Change this to MongoBSONError\n        throw new error_1.MongoInvalidArgumentError(\"Document is larger than the maximum size \".concat(this.s.maxBsonObjectSize));\n      // Create a new batch object if we don't have a current one\n      if (this.s.currentBatch == null) {\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n      }\n      var maxKeySize = this.s.maxKeySize;\n      // Check if we need to create a new batch\n      if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType) {\n        // Save the batch to the execution stack\n        this.s.batches.push(this.s.currentBatch);\n        // Create a new batch\n        this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        // Reset the current size trackers\n        this.s.currentBatchSize = 0;\n        this.s.currentBatchSizeBytes = 0;\n      }\n      if (batchType === common_1.BatchType.INSERT) {\n        this.s.bulkResult.insertedIds.push({\n          index: this.s.currentIndex,\n          _id: document._id\n        });\n      }\n      // We have an array of documents\n      if (Array.isArray(document)) {\n        throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n      }\n      this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n      this.s.currentBatch.operations.push(document);\n      this.s.currentBatchSize += 1;\n      this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n      this.s.currentIndex += 1;\n      return this;\n    }\n  }]);\n  return OrderedBulkOperation;\n}(common_1.BulkOperationBase);\nexports.OrderedBulkOperation = OrderedBulkOperation;","map":null,"metadata":{},"sourceType":"script"}