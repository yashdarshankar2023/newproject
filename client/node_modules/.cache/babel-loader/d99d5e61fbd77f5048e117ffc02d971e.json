{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connect = void 0;\nvar connection_string_1 = require(\"../connection_string\");\nvar constants_1 = require(\"../constants\");\nvar error_1 = require(\"../error\");\nvar topology_1 = require(\"../sdam/topology\");\nfunction connect(mongoClient, options, callback) {\n  if (!callback) {\n    throw new error_1.MongoInvalidArgumentError('Callback function must be provided');\n  }\n  // If a connection already been established, we can terminate early\n  if (mongoClient.topology && mongoClient.topology.isConnected()) {\n    return callback(undefined, mongoClient);\n  }\n  var logger = mongoClient.logger;\n  var connectCallback = function connectCallback(err) {\n    var warningMessage = 'seed list contains no mongos proxies, replicaset connections requires ' + 'the parameter replicaSet to be supplied in the URI or options object, ' + 'mongodb://server:port/db?replicaSet=name';\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      }\n      // Return a more specific error message for MongoClient.connect\n      // TODO(NODE-3483)\n      return callback(new error_1.MongoRuntimeError(warningMessage));\n    }\n    callback(err, mongoClient);\n  };\n  if (typeof options.srvHost === 'string') {\n    return (0, connection_string_1.resolveSRVRecord)(options, function (err, hosts) {\n      if (err || !hosts) return callback(err);\n      var _iterator = _createForOfIteratorHelper(hosts.entries()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            index = _step$value[0],\n            host = _step$value[1];\n          options.hosts[index] = host;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return createTopology(mongoClient, options, connectCallback);\n    });\n  }\n  return createTopology(mongoClient, options, connectCallback);\n}\nexports.connect = connect;\nfunction createTopology(mongoClient, options, callback) {\n  // Create the topology\n  var topology = new topology_1.Topology(options.hosts, options);\n  // Events can be emitted before initialization is complete so we have to\n  // save the reference to the topology on the client ASAP if the event handlers need to access it\n  mongoClient.topology = topology;\n  topology.client = mongoClient;\n  topology.once(topology_1.Topology.OPEN, function () {\n    return mongoClient.emit('open', mongoClient);\n  });\n  var _iterator2 = _createForOfIteratorHelper(constants_1.MONGO_CLIENT_EVENTS),\n    _step2;\n  try {\n    var _loop = function _loop() {\n      var event = _step2.value;\n      topology.on(event, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return mongoClient.emit.apply(mongoClient, [event].concat(args));\n      });\n    };\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop();\n    }\n    // initialize CSFLE if requested\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (mongoClient.autoEncrypter) {\n    mongoClient.autoEncrypter.init(function (err) {\n      if (err) {\n        return callback(err);\n      }\n      topology.connect(options, function (err) {\n        if (err) {\n          topology.close({\n            force: true\n          });\n          return callback(err);\n        }\n        options.encrypter.connectInternalClient(function (error) {\n          if (error) return callback(error);\n          callback(undefined, topology);\n        });\n      });\n    });\n    return;\n  }\n  // otherwise connect normally\n  topology.connect(options, function (err) {\n    if (err) {\n      topology.close({\n        force: true\n      });\n      return callback(err);\n    }\n    callback(undefined, topology);\n    return;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}