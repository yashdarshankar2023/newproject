{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.BSON = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Map = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.calculateObjectSize = exports.serialize = exports.deserialize = void 0;\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar BSON = require('bson');\nexports.BSON = BSON;\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.BSON = BSON = require('bson-ext');\n} catch (_unused) {} // eslint-disable-line\n/** @internal */\nexports.deserialize = BSON.deserialize;\n/** @internal */\nexports.serialize = BSON.serialize;\n/** @internal */\nexports.calculateObjectSize = BSON.calculateObjectSize;\nvar bson_1 = require(\"bson\");\nObject.defineProperty(exports, \"Binary\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Binary;\n  }\n});\nObject.defineProperty(exports, \"BSONRegExp\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.BSONRegExp;\n  }\n});\nObject.defineProperty(exports, \"BSONSymbol\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.BSONSymbol;\n  }\n});\nObject.defineProperty(exports, \"Code\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Code;\n  }\n});\nObject.defineProperty(exports, \"DBRef\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.DBRef;\n  }\n});\nObject.defineProperty(exports, \"Decimal128\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Decimal128;\n  }\n});\nObject.defineProperty(exports, \"Double\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Double;\n  }\n});\nObject.defineProperty(exports, \"Int32\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Int32;\n  }\n});\nObject.defineProperty(exports, \"Long\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Long;\n  }\n});\nObject.defineProperty(exports, \"Map\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Map;\n  }\n});\nObject.defineProperty(exports, \"MaxKey\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.MaxKey;\n  }\n});\nObject.defineProperty(exports, \"MinKey\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.MinKey;\n  }\n});\nObject.defineProperty(exports, \"ObjectId\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.ObjectId;\n  }\n});\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function get() {\n    return bson_1.Timestamp;\n  }\n});\nfunction pluckBSONSerializeOptions(options) {\n  var fieldsAsRaw = options.fieldsAsRaw,\n    promoteValues = options.promoteValues,\n    promoteBuffers = options.promoteBuffers,\n    promoteLongs = options.promoteLongs,\n    serializeFunctions = options.serializeFunctions,\n    ignoreUndefined = options.ignoreUndefined,\n    bsonRegExp = options.bsonRegExp,\n    raw = options.raw,\n    enableUtf8Validation = options.enableUtf8Validation;\n  return {\n    fieldsAsRaw: fieldsAsRaw,\n    promoteValues: promoteValues,\n    promoteBuffers: promoteBuffers,\n    promoteLongs: promoteLongs,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined,\n    bsonRegExp: bsonRegExp,\n    raw: raw,\n    enableUtf8Validation: enableUtf8Validation\n  };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n  var parentOptions = parent === null || parent === void 0 ? void 0 : parent.bsonOptions;\n  return {\n    raw: (_b = (_a = options === null || options === void 0 ? void 0 : options.raw) !== null && _a !== void 0 ? _a : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.raw) !== null && _b !== void 0 ? _b : false,\n    promoteLongs: (_d = (_c = options === null || options === void 0 ? void 0 : options.promoteLongs) !== null && _c !== void 0 ? _c : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteLongs) !== null && _d !== void 0 ? _d : true,\n    promoteValues: (_f = (_e = options === null || options === void 0 ? void 0 : options.promoteValues) !== null && _e !== void 0 ? _e : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteValues) !== null && _f !== void 0 ? _f : true,\n    promoteBuffers: (_h = (_g = options === null || options === void 0 ? void 0 : options.promoteBuffers) !== null && _g !== void 0 ? _g : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteBuffers) !== null && _h !== void 0 ? _h : false,\n    ignoreUndefined: (_k = (_j = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _j !== void 0 ? _j : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.ignoreUndefined) !== null && _k !== void 0 ? _k : false,\n    bsonRegExp: (_m = (_l = options === null || options === void 0 ? void 0 : options.bsonRegExp) !== null && _l !== void 0 ? _l : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.bsonRegExp) !== null && _m !== void 0 ? _m : false,\n    serializeFunctions: (_p = (_o = options === null || options === void 0 ? void 0 : options.serializeFunctions) !== null && _o !== void 0 ? _o : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.serializeFunctions) !== null && _p !== void 0 ? _p : false,\n    fieldsAsRaw: (_r = (_q = options === null || options === void 0 ? void 0 : options.fieldsAsRaw) !== null && _q !== void 0 ? _q : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.fieldsAsRaw) !== null && _r !== void 0 ? _r : {},\n    enableUtf8Validation: (_t = (_s = options === null || options === void 0 ? void 0 : options.enableUtf8Validation) !== null && _s !== void 0 ? _s : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.enableUtf8Validation) !== null && _t !== void 0 ? _t : true\n  };\n}\nexports.resolveBSONOptions = resolveBSONOptions;","map":null,"metadata":{},"sourceType":"script"}