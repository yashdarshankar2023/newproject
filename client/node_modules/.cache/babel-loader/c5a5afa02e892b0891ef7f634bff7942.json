{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\nvar crypto = require(\"crypto\");\nvar error_1 = require(\"../error\");\nvar utils_1 = require(\"../utils\");\nvar command_1 = require(\"./command\");\nvar operation_1 = require(\"./operation\");\n/** @internal */\nvar AddUserOperation = /*#__PURE__*/function (_command_1$CommandOpe) {\n  _inherits(AddUserOperation, _command_1$CommandOpe);\n  function AddUserOperation(db, username, password, options) {\n    var _this;\n    _classCallCheck(this, AddUserOperation);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddUserOperation).call(this, db, options));\n    _this.db = db;\n    _this.username = username;\n    _this.password = password;\n    _this.options = options !== null && options !== void 0 ? options : {};\n    return _this;\n  }\n  _createClass(AddUserOperation, [{\n    key: \"execute\",\n    value: function execute(server, session, callback) {\n      var db = this.db;\n      var username = this.username;\n      var password = this.password;\n      var options = this.options;\n      // Error out if digestPassword set\n      if (options.digestPassword != null) {\n        return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n      }\n      var roles;\n      if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n        (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n        if (db.databaseName.toLowerCase() === 'admin') {\n          roles = ['root'];\n        } else {\n          roles = ['dbOwner'];\n        }\n      } else {\n        roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n      }\n      var topology;\n      try {\n        topology = (0, utils_1.getTopology)(db);\n      } catch (error) {\n        return callback(error);\n      }\n      var digestPassword = topology.lastHello().maxWireVersion >= 7;\n      var userPassword = password;\n      if (!digestPassword) {\n        // Use node md5 generator\n        var md5 = crypto.createHash('md5');\n        // Generate keys used for authentication\n        md5.update(\"\".concat(username, \":mongo:\").concat(password));\n        userPassword = md5.digest('hex');\n      }\n      // Build the command to execute\n      var command = {\n        createUser: username,\n        customData: options.customData || {},\n        roles: roles,\n        digestPassword: digestPassword\n      };\n      // No password\n      if (typeof password === 'string') {\n        command.pwd = userPassword;\n      }\n      _get(_getPrototypeOf(AddUserOperation.prototype), \"executeCommand\", this).call(this, server, session, command, callback);\n    }\n  }]);\n  return AddUserOperation;\n}(command_1.CommandOperation);\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":null,"metadata":{},"sourceType":"script"}