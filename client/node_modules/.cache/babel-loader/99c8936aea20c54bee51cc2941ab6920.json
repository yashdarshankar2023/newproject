{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/taggedTemplateLiteral\");\nvar _objectSpread = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\nvar _slicedToArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _templateObject;\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(entriesFromString);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nvar dns = require(\"dns\");\nvar fs = require(\"fs\");\nvar mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nvar url_1 = require(\"url\");\nvar mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nvar providers_1 = require(\"./cmap/auth/providers\");\nvar compression_1 = require(\"./cmap/wire_protocol/compression\");\nvar encrypter_1 = require(\"./encrypter\");\nvar error_1 = require(\"./error\");\nvar logger_1 = require(\"./logger\");\nvar mongo_client_1 = require(\"./mongo_client\");\nvar promise_provider_1 = require(\"./promise_provider\");\nvar read_concern_1 = require(\"./read_concern\");\nvar read_preference_1 = require(\"./read_preference\");\nvar utils_1 = require(\"./utils\");\nvar write_concern_1 = require(\"./write_concern\");\nvar VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nvar LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nvar LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nvar LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  var regex = /^.*?\\./;\n  var srv = \".\".concat(srvAddress.replace(regex, ''));\n  var parent = \".\".concat(parentDomain.replace(regex, ''));\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  var lookupAddress = options.srvHost;\n  dns.resolveSrv(\"_\".concat(options.srvServiceName, \"._tcp.\").concat(lookupAddress), function (err, addresses) {\n    if (err) return callback(err);\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n    var _iterator = _createForOfIteratorHelper(addresses),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var name = _step.value.name;\n        if (!matchesParentDomain(name, lookupAddress)) {\n          return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var hostAddresses = addresses.map(function (r) {\n      var _a;\n      return utils_1.HostAddress.fromString(\"\".concat(r.name, \":\").concat((_a = r.port) !== null && _a !== void 0 ? _a : 27017));\n    });\n    var lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n    if (lbError) {\n      return callback(lbError);\n    }\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, function (err, record) {\n      var _a, _b, _c;\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n        var txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        var txtRecordOptionKeys = _toConsumableArray(txtRecordOptions.keys());\n        if (txtRecordOptionKeys.some(function (key) {\n          return !VALID_TXT_RECORDS.includes(key);\n        })) {\n          return callback(new error_1.MongoParseError(\"Text record may only set any of: \".concat(VALID_TXT_RECORDS.join(', '))));\n        }\n        if (VALID_TXT_RECORDS.some(function (option) {\n          return txtRecordOptions.get(option) === '';\n        })) {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n        var source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        var replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        var loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n        if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source: source\n          });\n        }\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n        var _lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (_lbError) {\n          return callback(_lbError);\n        }\n      }\n      callback(undefined, hostAddresses);\n    });\n  });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n  if (!options) return;\n  var check = function check(a, b) {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(\"The '\".concat(a, \"' option cannot be used with '\").concat(b, \"'\"));\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nvar TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nvar FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  var valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(\"deprecated value for \".concat(name, \" : \").concat(valueString, \" - please update to \").concat(name, \" : true instead\"));\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(\"deprecated value for \".concat(name, \" : \").concat(valueString, \" - please update to \").concat(name, \" : false instead\"));\n    }\n    return false;\n  }\n  throw new error_1.MongoParseError(\"Expected \".concat(name, \" to be stringified boolean value, got: \").concat(value));\n}\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  var parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(\"Expected \".concat(name, \" to be stringified int value, got: \").concat(value));\n}\nfunction getUint(name, value) {\n  var parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(\"\".concat(name, \" can only be a positive int value, got: \").concat(value));\n  }\n  return parsedValue;\n}\nfunction entriesFromString(value) {\n  var keyValuePairs, _iterator2, _step2, keyValue, _keyValue$split, _keyValue$split2, key, _value;\n  return _regeneratorRuntime().wrap(function entriesFromString$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          keyValuePairs = value.split(',');\n          _iterator2 = _createForOfIteratorHelper(keyValuePairs);\n          _context.prev = 2;\n          _iterator2.s();\n        case 4:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 13;\n            break;\n          }\n          keyValue = _step2.value;\n          _keyValue$split = keyValue.split(':'), _keyValue$split2 = _slicedToArray(_keyValue$split, 2), key = _keyValue$split2[0], _value = _keyValue$split2[1];\n          if (!(_value == null)) {\n            _context.next = 9;\n            break;\n          }\n          throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        case 9:\n          _context.next = 11;\n          return [key, _value];\n        case 11:\n          _context.next = 4;\n          break;\n        case 13:\n          _context.next = 18;\n          break;\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](2);\n          _iterator2.e(_context.t0);\n        case 18:\n          _context.prev = 18;\n          _iterator2.f();\n          return _context.finish(18);\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 15, 18, 21]]);\n}\nvar CaseInsensitiveMap = /*#__PURE__*/function (_Map) {\n  _inherits(CaseInsensitiveMap, _Map);\n  function CaseInsensitiveMap() {\n    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, CaseInsensitiveMap);\n    return _possibleConstructorReturn(this, _getPrototypeOf(CaseInsensitiveMap).call(this, entries.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n      return [k.toLowerCase(), v];\n    })));\n  }\n  _createClass(CaseInsensitiveMap, [{\n    key: \"has\",\n    value: function has(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"has\", this).call(this, k.toLowerCase());\n    }\n  }, {\n    key: \"get\",\n    value: function get(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"get\", this).call(this, k.toLowerCase());\n    }\n  }, {\n    key: \"set\",\n    value: function set(k, v) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"set\", this).call(this, k.toLowerCase(), v);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(k) {\n      return _get(_getPrototypeOf(CaseInsensitiveMap.prototype), \"delete\", this).call(this, k.toLowerCase());\n    }\n  }]);\n  return CaseInsensitiveMap;\n}(_wrapNativeSuper(Map));\nfunction parseOptions(uri) {\n  var mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  var url = new mongodb_connection_string_url_1.default(uri);\n  var hosts = url.hosts,\n    isSRV = url.isSRV;\n  var mongoOptions = Object.create(null);\n  // Feature flags\n  var _iterator3 = _createForOfIteratorHelper(Object.getOwnPropertySymbols(options)),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var flag = _step3.value;\n      if (exports.FEATURE_FLAGS.has(flag)) {\n        mongoOptions[flag] = options[flag];\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  var urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    var dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    var auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  var _iterator4 = _createForOfIteratorHelper(url.searchParams.keys()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _key = _step4.value;\n      var _values = _toConsumableArray(url.searchParams.getAll(_key));\n      if (_values.includes('')) {\n        throw new error_1.MongoAPIError('URI cannot contain options with no value');\n      }\n      if (!urlOptions.has(_key)) {\n        urlOptions.set(_key, _values);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  var objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      v = _ref4[1];\n    return v != null;\n  }));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  var allOptions = new CaseInsensitiveMap();\n  var allKeys = new Set([].concat(_toConsumableArray(urlOptions.keys()), _toConsumableArray(objectOptions.keys()), _toConsumableArray(exports.DEFAULT_OPTIONS.keys())));\n  var _iterator5 = _createForOfIteratorHelper(allKeys),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _key2 = _step5.value;\n      var _values2 = [];\n      var objectOptionValue = objectOptions.get(_key2);\n      if (objectOptionValue != null) {\n        _values2.push(objectOptionValue);\n      }\n      var urlValue = urlOptions.get(_key2);\n      if (urlValue != null) {\n        _values2.push.apply(_values2, _toConsumableArray(urlValue));\n      }\n      var defaultOptionsValue = exports.DEFAULT_OPTIONS.get(_key2);\n      if (defaultOptionsValue != null) {\n        _values2.push(defaultOptionsValue);\n      }\n      allOptions.set(_key2, _values2);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    var tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  var unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(function (s) {\n    return s.toLowerCase();\n  }));\n  if (unsupportedOptions.size !== 0) {\n    var optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    var isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(\"\".concat(optionWord, \" \").concat(Array.from(unsupportedOptions).join(', '), \" \").concat(isOrAre, \" not supported\"));\n  }\n  // Option parsing and setting\n  for (var _i = 0, _Object$entries = Object.entries(exports.OPTIONS); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      descriptor = _Object$entries$_i[1];\n    var values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n  if (mongoOptions.credentials) {\n    var isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    var isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    var isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(\"\".concat(mongoOptions.credentials, \" can only have authSource set to '$external'\"));\n    }\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  var lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (lbError) {\n    throw lbError;\n  }\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    var noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    var noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    var userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  var proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(function (key) {\n    var _a;\n    return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : [];\n  });\n  if (proxyOptions.some(function (options) {\n    return options.length > 1;\n  })) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  var target = descriptor.target,\n    type = descriptor.type,\n    transform = descriptor.transform,\n    deprecated = descriptor.deprecated;\n  var name = target !== null && target !== void 0 ? target : key;\n  if (deprecated) {\n    var deprecatedMsg = typeof deprecated === 'string' ? \": \".concat(deprecated) : '';\n    (0, utils_1.emitWarning)(\"\".concat(key, \" is a deprecated option\").concat(deprecatedMsg));\n  }\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(\"\".concat(name, \" must be an object\"));\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        var transformValue = transform({\n          name: name,\n          options: mongoOptions,\n          values: values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform: function transform(_ref5) {\n      var options = _ref5.options,\n        _ref5$values = _slicedToArray(_ref5.values, 1),\n        value = _ref5$values[0];\n      return (0, utils_1.makeClientMetadata)(_objectSpread({}, options.driverInfo, {\n        appName: String(value)\n      }));\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform: function transform(_ref6) {\n      var name = _ref6.name,\n        options = _ref6.options,\n        _ref6$values = _slicedToArray(_ref6.values, 1),\n        value = _ref6$values[0];\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(\"\".concat(name, \" must be an object with 'username' and 'password' properties\"));\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform: function transform(_ref7) {\n      var options = _ref7.options,\n        _ref7$values = _slicedToArray(_ref7.values, 1),\n        value = _ref7$values[0];\n      var _a, _b;\n      var mechanisms = Object.values(providers_1.AuthMechanism);\n      var _mechanisms$filter = mechanisms.filter(function (m) {\n          return m.match(RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\b\", \"\\b\"], [\"\\\\b\", \"\\\\b\"])), value), 'i'));\n        }),\n        _mechanisms$filter2 = _slicedToArray(_mechanisms$filter, 1),\n        mechanism = _mechanisms$filter2[0];\n      if (!mechanism) {\n        throw new error_1.MongoParseError(\"authMechanism one of \".concat(mechanisms, \", got \").concat(value));\n      }\n      var source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      var password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism: mechanism,\n        source: source,\n        password: password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform: function transform(_ref8) {\n      var options = _ref8.options,\n        _ref8$values = _slicedToArray(_ref8.values, 1),\n        optionValue = _ref8$values[0];\n      if (typeof optionValue === 'string') {\n        var mechanismProperties = Object.create(null);\n        var _iterator6 = _createForOfIteratorHelper(entriesFromString(optionValue)),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _step6$value = _slicedToArray(_step6.value, 2),\n              key = _step6$value[0],\n              value = _step6$value[1];\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch (_unused) {\n              mechanismProperties[key] = value;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties: mechanismProperties\n        });\n      }\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform: function transform(_ref9) {\n      var options = _ref9.options,\n        _ref9$values = _slicedToArray(_ref9.values, 1),\n        value = _ref9$values[0];\n      var source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source: source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform: function transform(_ref10) {\n      var _ref10$values = _slicedToArray(_ref10.values, 1),\n        version = _ref10$values[0];\n      var serverApiToValidate = typeof version === 'string' ? {\n        version: version\n      } : version;\n      var versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(\"Invalid `serverApi` property; must specify a version from the following enum: [\\\"\".concat(Object.values(mongo_client_1.ServerApiVersion).join('\", \"'), \"\\\"]\"));\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(function (v) {\n        return v === versionToValidate;\n      })) {\n        throw new error_1.MongoParseError(\"Invalid server API version=\".concat(versionToValidate, \"; must be in the following enum: [\\\"\").concat(Object.values(mongo_client_1.ServerApiVersion).join('\", \"'), \"\\\"]\"));\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform: function transform(_ref11) {\n      var values = _ref11.values;\n      var compressionList = new Set();\n      var _iterator7 = _createForOfIteratorHelper(values),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var compVal = _step7.value;\n          var compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n          if (!Array.isArray(compValArray)) {\n            throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n          }\n          var _iterator8 = _createForOfIteratorHelper(compValArray),\n            _step8;\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var c = _step8.value;\n              if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                compressionList.add(String(c));\n              } else {\n                throw new error_1.MongoInvalidArgumentError(\"\".concat(c, \" is not a valid compression mechanism. Must be one of: \").concat(Object.keys(compression_1.Compressor), \".\"));\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return _toConsumableArray(compressionList);\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n    transform: function transform(_ref12) {\n      var options = _ref12.options,\n        _ref12$values = _slicedToArray(_ref12.values, 1),\n        value = _ref12$values[0];\n      var _a, _b;\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform: function transform(_ref13) {\n      var name = _ref13.name,\n        _ref13$values = _slicedToArray(_ref13.values, 1),\n        value = _ref13$values[0];\n      var transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(\"Option 'family' must be 4 or 6 got \".concat(transformValue, \".\"));\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform: function transform(_ref14) {\n      var name = _ref14.name,\n        options = _ref14.options,\n        _ref14$values = _slicedToArray(_ref14.values, 1),\n        value = _ref14$values[0];\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          fsync: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from fsync=\".concat(value));\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform: function transform(_ref15) {\n      var name = _ref15.name,\n        options = _ref15.options,\n        _ref15$values = _slicedToArray(_ref15.values, 1),\n        value = _ref15$values[0];\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          journal: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from journal=\".concat(value));\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform: function transform(_ref16) {\n      var name = _ref16.name,\n        options = _ref16.options,\n        _ref16$values = _slicedToArray(_ref16.values, 1),\n        value = _ref16$values[0];\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          journal: getBoolean(name, value)\n        })\n      });\n      if (!wc) throw new error_1.MongoParseError(\"Unable to make a writeConcern from journal=\".concat(value));\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n    transform: function transform(_ref17) {\n      var _ref17$values = _slicedToArray(_ref17.values, 1),\n        value = _ref17$values[0];\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform: function transform(_ref18) {\n      var _ref18$values = _slicedToArray(_ref18.values, 1),\n        value = _ref18$values[0];\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform: function transform(_ref19) {\n      var name = _ref19.name,\n        _ref19$values = _slicedToArray(_ref19.values, 1),\n        value = _ref19$values[0];\n      var maxConnecting = getUint(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform: function transform(_ref20) {\n      var name = _ref20.name,\n        options = _ref20.options,\n        _ref20$values = _slicedToArray(_ref20.values, 1),\n        value = _ref20$values[0];\n      var maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: _objectSpread({}, options.readPreference, {\n            maxStalenessSeconds: maxStalenessSeconds\n          })\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds: maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform: function transform(_ref21) {\n      var _ref21$values = _slicedToArray(_ref21.values, 1),\n        value = _ref21$values[0],\n        options = _ref21.options;\n      return _objectSpread({}, options.driverInfo, {\n        name: String(value)\n      });\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform: function transform(_ref22) {\n      var _ref22$values = _slicedToArray(_ref22.values, 1),\n        value = _ref22$values[0];\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(\"Option pkFactory must be an object with a createPk function, got \".concat(value));\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform: function transform(_ref23) {\n      var _ref23$values = _slicedToArray(_ref23.values, 1),\n        value = _ref23$values[0],\n        options = _ref23.options;\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions(_objectSpread({}, options.readConcern, value));\n      }\n      throw new error_1.MongoParseError(\"ReadConcern must be an object, got \".concat(JSON.stringify(value)));\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform: function transform(_ref24) {\n      var _ref24$values = _slicedToArray(_ref24.values, 1),\n        level = _ref24$values[0],\n        options = _ref24.options;\n      return read_concern_1.ReadConcern.fromOptions(_objectSpread({}, options.readConcern, {\n        level: level\n      }));\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform: function transform(_ref25) {\n      var _ref25$values = _slicedToArray(_ref25.values, 1),\n        value = _ref25$values[0],\n        options = _ref25.options;\n      var _a, _b, _c;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions(_objectSpread({\n          readPreference: _objectSpread({}, options.readPreference, value)\n        }, value));\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        var rp = read_preference_1.ReadPreference.fromOptions(_objectSpread({\n          readPreference: _objectSpread({}, options.readPreference, value)\n        }, value));\n        if (rp) return rp;else throw new error_1.MongoParseError(\"Cannot make read preference from \".concat(JSON.stringify(value)));\n      }\n      if (typeof value === 'string') {\n        var rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(\"Unknown ReadPreference value: \".concat(value));\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform: function transform(_ref26) {\n      var values = _ref26.values,\n        options = _ref26.options;\n      var tags = Array.isArray(values[0]) ? values[0] : values;\n      var readPreferenceTags = [];\n      var _iterator9 = _createForOfIteratorHelper(tags),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var tag = _step9.value;\n          var readPreferenceTag = Object.create(null);\n          if (typeof tag === 'string') {\n            var _iterator10 = _createForOfIteratorHelper(entriesFromString(tag)),\n              _step10;\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var _step10$value = _slicedToArray(_step10.value, 2),\n                  k = _step10$value[0],\n                  v = _step10$value[1];\n                readPreferenceTag[k] = v;\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          }\n          if ((0, utils_1.isRecord)(tag)) {\n            for (var _i2 = 0, _Object$entries2 = Object.entries(tag); _i2 < _Object$entries2.length; _i2++) {\n              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                _k = _Object$entries2$_i[0],\n                _v = _Object$entries2$_i[1];\n              readPreferenceTag[_k] = _v;\n            }\n          }\n          readPreferenceTags.push(readPreferenceTag);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags: readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform: function transform(_ref27) {\n      var _ref27$values = _slicedToArray(_ref27.values, 1),\n        value = _ref27$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform: function transform(_ref28) {\n      var _ref28$values = _slicedToArray(_ref28.values, 1),\n        value = _ref28$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform: function transform(_ref29) {\n      var _ref29$values = _slicedToArray(_ref29.values, 1),\n        value = _ref29$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform: function transform(_ref30) {\n      var _ref30$values = _slicedToArray(_ref30.values, 1),\n        value = _ref30$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform: function transform(_ref31) {\n      var name = _ref31.name,\n        _ref31$values = _slicedToArray(_ref31.values, 1),\n        value = _ref31$values[0];\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform: function transform(_ref32) {\n      var name = _ref32.name,\n        _ref32$values = _slicedToArray(_ref32.values, 1),\n        value = _ref32$values[0];\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? function () {\n        return undefined;\n      } : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform: function transform(_ref33) {\n      var _ref33$values = _slicedToArray(_ref33.values, 1),\n        value = _ref33$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform: function transform(_ref34) {\n      var _ref34$values = _slicedToArray(_ref34.values, 1),\n        value = _ref34$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform: function transform(_ref35) {\n      var _ref35$values = _slicedToArray(_ref35.values, 1),\n        value = _ref35$values[0];\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform: function transform(_ref36) {\n      var name = _ref36.name,\n        options = _ref36.options,\n        _ref36$values = _slicedToArray(_ref36.values, 1),\n        value = _ref36$values[0];\n      var tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = function () {\n          return undefined;\n        };\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? function () {\n          return undefined;\n        } : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform: function transform(_ref37) {\n      var _ref37$values = _slicedToArray(_ref37.values, 1),\n        value = _ref37$values[0],\n        options = _ref37.options;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          w: value\n        })\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform: function transform(_ref38) {\n      var _ref38$values = _slicedToArray(_ref38.values, 1),\n        value = _ref38$values[0],\n        options = _ref38.options;\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: _objectSpread({}, options.writeConcern, value)\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: _objectSpread({}, options.writeConcern, {\n            w: value\n          })\n        });\n      }\n      throw new error_1.MongoParseError(\"Invalid WriteConcern cannot parse: \".concat(JSON.stringify(value)));\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform: function transform(_ref39) {\n      var _ref39$values = _slicedToArray(_ref39.values, 1),\n        value = _ref39$values[0],\n        options = _ref39.options;\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          wtimeout: getUint('wtimeout', value)\n        })\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(\"Cannot make WriteConcern from wtimeout\");\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform: function transform(_ref40) {\n      var _ref40$values = _slicedToArray(_ref40.values, 1),\n        value = _ref40$values[0],\n        options = _ref40.options;\n      var wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: _objectSpread({}, options.writeConcern, {\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        })\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(\"Cannot make WriteConcern from wtimeout\");\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(function (_ref41) {\n  var _ref42 = _slicedToArray(_ref41, 2),\n    descriptor = _ref42[1];\n  return descriptor.default != null;\n}).map(function (_ref43) {\n  var _ref44 = _slicedToArray(_ref43, 2),\n    k = _ref44[0],\n    d = _ref44[1];\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);","map":null,"metadata":{},"sourceType":"script"}