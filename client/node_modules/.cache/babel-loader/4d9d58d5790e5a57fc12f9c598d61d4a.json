{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"F:\\\\programnodejs\\\\project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nvar constants_1 = require(\"../constants\");\nvar utils_1 = require(\"../utils\");\nvar commands_1 = require(\"./commands\");\n/**\n * An event indicating the start of a given\n * @public\n * @category Event\n */\nvar CommandStartedEvent = /*#__PURE__*/function () {\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  function CommandStartedEvent(connection, command) {\n    _classCallCheck(this, CommandStartedEvent);\n    var cmd = extractCommand(command);\n    var commandName = extractCommandName(cmd);\n    var _extractConnectionDet = extractConnectionDetails(connection),\n      address = _extractConnectionDet.address,\n      connectionId = _extractConnectionDet.connectionId,\n      serviceId = _extractConnectionDet.serviceId; // TODO: remove in major revision, this is not spec behavior\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = databaseName(command);\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n  }\n  /* @internal */\n  _createClass(CommandStartedEvent, [{\n    key: \"hasServiceId\",\n    get: function get() {\n      return !!this.serviceId;\n    }\n  }]);\n  return CommandStartedEvent;\n}();\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nvar CommandSucceededEvent = /*#__PURE__*/function () {\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  function CommandSucceededEvent(connection, command, reply, started) {\n    _classCallCheck(this, CommandSucceededEvent);\n    var cmd = extractCommand(command);\n    var commandName = extractCommandName(cmd);\n    var _extractConnectionDet2 = extractConnectionDetails(connection),\n      address = _extractConnectionDet2.address,\n      connectionId = _extractConnectionDet2.connectionId,\n      serviceId = _extractConnectionDet2.serviceId;\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n  }\n  /* @internal */\n  _createClass(CommandSucceededEvent, [{\n    key: \"hasServiceId\",\n    get: function get() {\n      return !!this.serviceId;\n    }\n  }]);\n  return CommandSucceededEvent;\n}();\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nvar CommandFailedEvent = /*#__PURE__*/function () {\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  function CommandFailedEvent(connection, command, error, started) {\n    _classCallCheck(this, CommandFailedEvent);\n    var cmd = extractCommand(command);\n    var commandName = extractCommandName(cmd);\n    var _extractConnectionDet3 = extractConnectionDetails(connection),\n      address = _extractConnectionDet3.address,\n      connectionId = _extractConnectionDet3.connectionId,\n      serviceId = _extractConnectionDet3.serviceId;\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.failure = maybeRedact(commandName, cmd, error);\n  }\n  /* @internal */\n  _createClass(CommandFailedEvent, [{\n    key: \"hasServiceId\",\n    get: function get() {\n      return !!this.serviceId;\n    }\n  }]);\n  return CommandFailedEvent;\n}();\nexports.CommandFailedEvent = CommandFailedEvent;\n/** Commands that we want to redact because of the sensitive nature of their contents */\nvar SENSITIVE_COMMANDS = new Set(['authenticate', 'saslStart', 'saslContinue', 'getnonce', 'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb']);\nvar HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nvar extractCommandName = function extractCommandName(commandDoc) {\n  return Object.keys(commandDoc)[0];\n};\nvar namespace = function namespace(command) {\n  return command.ns;\n};\nvar databaseName = function databaseName(command) {\n  return command.ns.split('.')[0];\n};\nvar collectionName = function collectionName(command) {\n  return command.ns.split('.')[1];\n};\nvar maybeRedact = function maybeRedact(commandName, commandDoc, result) {\n  return SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\n};\nvar LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\nvar LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n};\nvar OP_QUERY_KEYS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial', 'exhaust'];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n  var _a;\n  if (command instanceof commands_1.Msg) {\n    return (0, utils_1.deepCopy)(command.command);\n  }\n  if ((_a = command.query) === null || _a === void 0 ? void 0 : _a.$query) {\n    var result;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = {\n        find: collectionName(command)\n      };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(function (key) {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n        }\n      });\n    }\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(function (key) {\n      var legacyKey = key;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n      }\n    });\n    OP_QUERY_KEYS.forEach(function (key) {\n      if (command[key]) {\n        result[key] = command[key];\n      }\n    });\n    if (command.pre32Limit != null) {\n      result.limit = command.pre32Limit;\n    }\n    if (command.query.$explain) {\n      return {\n        explain: result\n      };\n    }\n    return result;\n  }\n  var clonedQuery = {};\n  var clonedCommand = {};\n  if (command.query) {\n    for (var k in command.query) {\n      clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n    }\n    clonedCommand.query = clonedQuery;\n  }\n  for (var _k in command) {\n    if (_k === 'query') continue;\n    clonedCommand[_k] = (0, utils_1.deepCopy)(command[_k]);\n  }\n  return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n  if (!reply) {\n    return reply;\n  }\n  if (command instanceof commands_1.Msg) {\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n  }\n  // is this a legacy find command?\n  if (command.query && command.query.$query != null) {\n    return {\n      ok: 1,\n      cursor: {\n        id: (0, utils_1.deepCopy)(reply.cursorId),\n        ns: namespace(command),\n        firstBatch: (0, utils_1.deepCopy)(reply.documents)\n      }\n    };\n  }\n  return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n  var connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId: connectionId\n  };\n}","map":null,"metadata":{},"sourceType":"script"}